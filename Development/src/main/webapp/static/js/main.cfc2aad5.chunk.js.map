{"version":3,"sources":["LoginPage.js","components/layout/Header.js","components/pages/About.js","AddMessage.js","MessageItem.js","Messages.js","ToField.js","Users.js","Groups.js","NewGroup.js","Messenger.js","UserServiceMessageProcessing.js","ChatMessageProcessing.js","GeneralMessageRouter.js","WebSocket.js","App.js","index.js"],"names":["LoginPage","props","state","value","handleChange","bind","handleLogin","handleCreate","event","this","setState","target","preventDefault","json","JSON","stringify","console","log","send","username","to","className","onSubmit","type","name","autoComplete","onChange","onClick","React","Component","Header","display","prevProps","class","aria-label","About","fontSize","padding","Fragment","style","getStyle","AddMessage","content","e","addMessage","placeholder","MessageItem","from","textAlign","getNameStyle","getFontStyle","sentiment","charAt","color","message","Messages","filtered","these","newMessages1","messageWith","currentUser","groups","includes","filter","messages","map","filterMessages","ToField","setTo","Users","setMessageWith","a","item","users","user","Groups","setGroup","group","NewGroup","newGroup","addGroup","Messenger","addToChatBox","newMessage","queuedMessage","userServiceContent","LOGIN","USER_CREATE","SEARCH_USERS_BY_NAME","FRIEND_USER","userServiveMessageRouter","contentType","genericMessageResponses","SUCCESS","alert","FAILURE","processLoginResponse","processUserCreateResponse","contentTypes","ASCII","GROUP_MESSAGE","processDirectChatMessage","ws","messageTypes","USER_SERVICE","SESSION_SERVICE","GROUP_SERVICE","DIRECT_MESSAGE","BROADCAST_MESSAGE","generalMessageRouter","chatMessageRouter","connect","document","location","host","pathname","WebSocket","onopen","onclose","code","onerror","evt","data","onmessage","parse","App","active_socket","authenticated","retrieveAllUsers","setTimeout","processUserSearch","userList","split","basename","exact","path","render","routeProps","component","ReactDOM","getElementById"],"mappings":"wTA8EeA,E,YAxEX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CAAEC,MAAO,IAEtB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBANL,E,0EAUNG,GACTC,KAAKC,SAAS,CAAEP,MAAOK,EAAMG,OAAOR,U,kCAG5BK,GACRA,EAAMI,iBAEN,IAAIC,EAAOC,KAAKC,UAAU,CACtB,KAAQ,eACR,YAAe,QACf,QAAWN,KAAKP,MAAMC,QAG1Ba,QAAQC,IAAI,mBAAoBR,KAAKP,MAAMC,OAE3CM,KAAKR,MAAMiB,KAAKL,K,mCAGPL,GACTA,EAAMI,iBAEN,IAAIC,EAAOC,KAAKC,UAAU,CACtB,KAAQ,eACR,YAAe,cACf,QAAWN,KAAKP,MAAMC,QAG1Ba,QAAQC,IAAI,wBAAyBR,KAAKP,MAAMC,OAChDM,KAAKR,MAAMiB,KAAKL,K,+BAOhB,OAAgC,OAAzBJ,KAAKR,MAAMkB,SACd,kBAAC,IAAD,CAAUC,GAAG,UAET,yBAAKC,UAAU,yBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,2BACX,yBAAKA,UAAU,OACX,0BAAMC,SAAUb,KAAKH,aACjB,yBAAKe,UAAU,SACX,2BAAOA,UAAU,SAAjB,aACA,yBAAKA,UAAU,WACX,2BAAOA,UAAU,QAAQE,KAAK,OAAOC,KAAK,WAAWC,aAAa,MAAMC,SAAUjB,KAAKL,iBAG/F,yBAAKiB,UAAU,sBACX,4BAAQE,KAAK,SAASF,UAAU,uCAAuCM,QAASlB,KAAKH,aAArF,SACA,4BAAQiB,KAAK,SAASF,UAAU,uCAAuCM,QAASlB,KAAKF,cAArF,oB,GA/DhBqB,IAAMC,WCgCfC,EAjCf,2MAEI5B,MAAQ,CACJ6B,QAAS,YAHjB,kFAMuBC,GAEf,GAAIvB,KAAKR,MAAMkB,WAAaa,EAAUb,SAAU,CAC5C,IAAIY,EAAU,OAAStB,KAAKR,MAAMkB,SAAW,IAC7CV,KAAKC,SAAS,CAAEqB,QAASA,OAVrC,+BAgBQ,OACI,yBAAKE,MAAM,wDAAwDC,aAAW,eAC1E,wBAAID,MAAM,cAAcxB,KAAKP,MAAM6B,SACnC,4BACI,4BAAI,kBAAC,IAAD,CAAMX,GAAG,KAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,SAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,gBAtBxB,GAA4BS,aCyBbM,EA1Bf,mLAGQ,MAAO,CACHC,SAAU,OACVC,QAAS,UALrB,+BAUQ,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAKC,MAAO9B,KAAK+B,YACb,+PACA,gDACA,2CACA,8CAhBpB,GAA2BX,a,QC+BZY,EA/Bf,2MACIvC,MAAQ,CACJwC,QAAS,IAFjB,EAKIhB,SAAW,SAACiB,GAAD,OAAO,EAAKjC,SAAL,eAAiBiC,EAAEhC,OAAOa,KAAOmB,EAAEhC,OAAOR,SALhE,EAOImB,SAAW,SAACqB,GACRA,EAAE/B,iBACF,EAAKX,MAAM2C,WAAW,EAAK1C,MAAMwC,SACjC,EAAKhC,SAAS,CAAEgC,QAAS,MAVjC,wEAcQ,OACI,0BAAMpB,SAAUb,KAAKa,UACjB,2BACID,UAAY,QACZE,KAAK,OACLC,KAAK,UACLqB,YAAY,eACZpB,aAAa,MACbtB,MAAOM,KAAKP,MAAMwC,QAClBhB,SAAUjB,KAAKiB,gBAvBnC,GAAgCG,aCsEjBiB,EArEf,2MACIN,SAAW,SAACO,GACR,OAAI,EAAK9C,MAAMkB,WAAa4B,EACjB,CACHX,SAAU,OACVY,UAAW,QACXX,QAAS,QAIN,CACHD,SAAU,OACVY,UAAW,OACXX,QAAS,SAbzB,EAkBIY,aAAe,SAACF,GACZ,MAAO,CACHX,SAAU,OACVC,QAAS,QArBrB,EAyBIa,aAAe,SAACC,GAIZ,OAHeA,EAAUC,OAAO,IAK5B,IAAK,IACD,MAAO,CACHC,MAAO,WAGf,IAAK,IACD,MAAO,CACHA,MAAO,WAGf,IAAK,IACD,MAAO,CACHA,MAAO,aA3C3B,wEAgDc,IAAD,EAEoC5C,KAAKR,MAAMqD,QAA5CP,EAFH,EAEGA,KAAUL,GAFb,EAEStB,GAFT,EAEasB,SAASS,EAFtB,EAEsBA,UAE3B,OACI,yBAAKZ,MAAO9B,KAAK+B,SAASO,IACtB,uBAAGR,MAAO9B,KAAKwC,gBACVF,GAEL,uBAAGR,MAAO9B,KAAKyC,aAAaC,IACvBT,QA1DrB,GAAiCb,aCsClB0B,E,2MApCXC,SAAW,SAACC,GACR,IAGIC,EAHEC,EAAc,EAAK1D,MAAM0D,YACzBC,EAAc,EAAK3D,MAAMkB,SAmB/B,OAfI,EAAKlB,MAAM4D,OAAOC,SAASH,IAE3B3C,QAAQC,IAAI,mBACZyC,EAAeD,EAAMM,QAAO,SAAAC,GAAQ,OAAIA,EAAS5C,KAAOuC,OAIxD3C,QAAQC,IAAI,oBAGZyC,EAFcD,EAAMM,QAAO,SAAAC,GAAQ,OAC7BA,EAASjB,OAASa,GAAiBI,EAASjB,OAASY,KAChCI,QAAO,SAAAC,GAAQ,OACpCA,EAAS5C,KAAOwC,GAAiBI,EAAS5C,KAAOuC,MAIpDD,G,wEAID,IAAD,OACL,OAAOjD,KAAK+C,SAAS/C,KAAKR,MAAM+D,UAAUC,KAAI,SAACX,GAAD,OAC1C,kBAAC,EAAD,CAAaA,QAASA,EAASY,eAAgB,EAAKA,eAAgB/C,SAAU,EAAKlB,MAAMkB,SAAUwC,YAAa,EAAK1D,MAAM0D,qB,GA5BhH9B,aC8BRsC,EAhCf,2MAEIjE,MAAQ,CACJyD,YAAa,IAHrB,EAMIjC,SAAW,SAACiB,GAER,EAAKjC,SAAL,eACKiC,EAAEhC,OAAOa,KAAOmB,EAAEhC,OAAOR,QAC3B,WACC,EAAKF,MAAMmE,MAAM,EAAKlE,MAAMyD,iBAXxC,0EAiBQ,MAAO,CACHX,UAAW,UAlBvB,+BAwBQ,OACI,6BACI,wBAAIf,MAAM,gBAAgBM,MAAO9B,KAAK+B,YAAa/B,KAAKR,MAAM0D,kBA1B9E,GAA6B9B,aC0BdwC,E,2MAvBXC,eAAiB,SAACC,GACd,EAAKtE,MAAMmE,MAAMG,I,EAGrBf,SAAW,SAACC,GACR,OAAOA,EAAMM,QAAO,SAAAS,GAAI,OAAKA,IAAS,EAAKvE,MAAMkB,a,wEAI3C,IAAD,OAEL,OAAOV,KAAK+C,SAAS/C,KAAKR,MAAMwE,OAAOR,KAAI,SAACS,GAAD,OACvC,4BACI,4BAAQzC,MAAM,+BAA+BN,QAAS,kBAAM,EAAK2C,eAAeI,KAAQA,W,GAfpF7C,aCoBL8C,E,2MAlBXC,SAAW,SAACL,GACR,EAAKtE,MAAMmE,MAAMG,I,wEAGX,IAAD,OACL,OAAO9D,KAAKR,MAAM4D,OAAOI,KAAI,SAACY,GAAD,OACzB,4BACI,4BAAQ5C,MAAM,+BAA+BN,QAAS,kBAAM,EAAKiD,SAASC,KAASA,W,GAT9EhD,aC6BNiD,EA9Bf,2MACI5E,MAAQ,CACJ6E,SAAU,IAFlB,EAKIrD,SAAW,SAACiB,GAAD,OAAO,EAAKjC,SAAL,eAAiBiC,EAAEhC,OAAOa,KAAOmB,EAAEhC,OAAOR,SALhE,EAOImB,SAAW,SAACqB,GACRA,EAAE/B,iBACF,EAAKX,MAAM+E,SAAS,EAAK9E,MAAM6E,UAC/B,EAAKrE,SAAS,CAAEqE,SAAU,MAVlC,wEAcQ,OACI,0BAAMzD,SAAUb,KAAKa,UACjB,2BACID,UAAU,iBACVE,KAAK,OACLC,KAAK,WACLqB,YAAY,YACZpB,aAAa,MACbtB,MAAOM,KAAKP,MAAM6E,SAClBrD,SAAUjB,KAAKiB,gBAvBnC,GAA8BG,aCmJfoD,E,2MA1IX/E,MAAQ,CACJyD,YAAa,GACbK,SAAU,I,EAoBdE,eAAiB,WAEb,GAAI,EAAKjE,MAAM4D,OAAOC,SAAS,EAAK5D,MAAMyD,aAAc,CAEpD,IAAMA,EAAc,EAAKzD,MAAMyD,YAEzBD,GADc,EAAKzD,MAAMkB,SACV,EAAKjB,MAAM8D,SAASD,QAAO,SAAAC,GAAQ,OACnDA,EAAS5C,KAAOuC,MACrB,EAAKjD,SAAS,CAAEsD,SAAUN,QAEzB,CAED,IAAMC,EAAc,EAAKzD,MAAMyD,YACzBC,EAAc,EAAK3D,MAAMkB,SAGzBuC,EAFc,EAAKxD,MAAM8D,SAASD,QAAO,SAAAC,GAAQ,OACjDA,EAASjB,OAASa,GAAiBI,EAASjB,OAASY,KAC1BI,QAAO,SAAAC,GAAQ,OAC1CA,EAAS5C,KAAOwC,GAAiBI,EAAS5C,KAAOuC,KACvD,EAAKjD,SAAS,CAAEsD,SAAUN,M,EAMlCwB,aAAe,SAACC,GACZ,EAAKzE,SAAS,CACVsD,SAAS,GAAD,mBAAM,EAAK9D,MAAM8D,UAAjB,CAA2BmB,MACpC,WACC,EAAKjB,qB,EAIbE,MAAQ,SAAChD,GACL,EAAKV,SAAS,CAAEiD,YAAavC,K,EAKjC4D,SAAW,SAACH,GACR,EAAK5E,MAAM+E,SAASH,GAEpB,IAAIhE,EAAOC,KAAKC,UAAU,CACtB,KAAQ,gBACR,YAAe,eACf,QAAW8D,IAGf,EAAK5E,MAAMiB,KAAKL,I,EAIpB+B,WAAa,SAACF,GACV,GAAI,EAAKzC,MAAM4D,OAAOC,SAAS,EAAK5D,MAAMyD,aAEtC,IAAI9C,EAAOC,KAAKC,UAAU,CACtB,KAAQ,oBACR,KAAQ,EAAKd,MAAMkB,SACnB,GAAM,EAAKjB,MAAMyD,YACjB,YAAe,gBACf,QAAWjB,SAGd,GAAI,EAAKzC,MAAMwE,MAAMX,SAAS,EAAK5D,MAAMyD,aACtC9C,EAAOC,KAAKC,UAAU,CACtB,KAAQ,oBACR,KAAQ,EAAKd,MAAMkB,SACnB,GAAM,EAAKjB,MAAMyD,YACjB,YAAe,QACf,QAAWjB,IAGnB,EAAKzC,MAAMiB,KAAKL,I,kFAxFDmB,GAAY,IAAD,OAEtBvB,KAAKR,MAAMmF,gBAAkBpD,EAAUoD,eACvC3E,KAAKC,SAAS,CACVsD,SAAS,GAAD,mBAAMvD,KAAKP,MAAM8D,UAAjB,CAA2BvD,KAAKR,MAAMmF,kBAC/C,WACCpE,QAAQC,IAAI,EAAKf,MAAM8D,e,gGAqFN7C,GAEzB,IAAIN,EAAOC,KAAKC,UAAU,CACtB,KAAQ,eACR,YAAe,uBACf,QAAWI,IAEfV,KAAKR,MAAMiB,KAAKL,K,+BAKhB,OAA+B,OAAxBJ,KAAKR,MAAMkB,SACd,kBAAC,IAAD,CAAUC,GAAG,MAET,yBAAKC,UAAU,aACX,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,oBACX,wBAAIY,MAAM,SAAV,SACA,kBAAC,IAAMK,SAAP,KACI,kBAAC,EAAD,CAAOmC,MAAOhE,KAAKR,MAAMwE,MAAOL,MAAO3D,KAAK2D,MAAOjD,SAAUV,KAAKR,MAAMkB,YAE5E,wBAAIc,MAAM,SAAV,UACA,kBAAC,IAAMK,SAAP,KACI,kBAAC,EAAD,CAAU0C,SAAUvE,KAAKuE,WACzB,kBAAC,EAAD,CAAQnB,OAAQpD,KAAKR,MAAM4D,OAAQO,MAAO3D,KAAK2D,UAGvD,yBAAK/C,UAAU,UACX,kBAAC,IAAMiB,SAAP,KACI,kBAAC,EAAD,CAASqB,YAAalD,KAAKP,MAAMyD,cACjC,kBAAC,EAAD,CAAUK,SAAUvD,KAAKP,MAAM8D,SAAU7C,SAAUV,KAAKR,MAAMkB,SAAUwC,YAAalD,KAAKP,MAAMyD,YAAaE,OAAQpD,KAAKR,MAAM4D,SAChI,kBAAC,EAAD,CAAYjB,WAAYnC,KAAKmC,qB,GAlIrCf,aCKlBwD,EAAqB,CAKvBC,MAAO,QAIPC,YAAa,cAIbC,qBAAsB,uBAItBC,YAAa,eAUjB,SAASC,EAAyBpC,GAG7BA,EAAQqC,aAAeN,EAAmBC,OAyB/C,SAA8BhC,GACzBA,EAAQZ,QAAQoB,SAAS8B,EAAwBC,UACpD7E,QAAQC,IAAI,mDACZ6E,MAAM,2CAIGxC,EAAQZ,QAAQoB,SAAS8B,EAAwBG,WAC1D/E,QAAQC,IAAI,8DACZ6E,MAAM,wDAjCNE,CAAqB1C,GAIlBA,EAAQqC,aAAeN,EAAmBE,aA0C/C,SAAmCjC,GAC9BA,EAAQZ,QAAQoB,SAAS8B,EAAwBC,UACpD7E,QAAQC,IAAI,8BACZ6E,MAAM,+BAIGxC,EAAQZ,QAAQoB,SAAS8B,EAAwBG,WAC1D/E,QAAQC,IAAI,+DACZ6E,MAAM,8DAjDNG,CAA0B3C,GAIvBA,EAAQqC,YAAeN,EAAmBG,qBCjD/C,IAAMU,EAAe,CAIpBC,MAAO,QAKPC,cAAe,iBA2BhB,SAASC,EAAyB/C,GACjCtC,QAAQC,IAAI,0BACZD,QAAQC,IAAIqC,GCrCb,ICJIgD,EDIEC,EAAe,CAEpBC,aAAc,eAIdC,gBAAiB,kBAIjBC,cAAe,gBAIfN,cAAe,gBAIfO,eAAgB,iBAIhBC,kBAAmB,qBAMdhB,EAA0B,CAI/BC,QAAS,UAITE,QAAS,WASV,SAASc,EAAqBvD,GAC7BtC,QAAQC,IAAI,0BACZD,QAAQC,IAAIqC,GACRA,EAAQ/B,MAAQgF,EAAaK,oBAEhC5F,QAAQC,IAAI,0CDlCd,SAA2BqC,GAEtBA,EAAQ/B,MAAQgF,EAAaK,kBAChCP,EAAyB/C,GACfA,EAAQ/B,MAAQgF,EAAaI,iBACnCrD,EAAQqC,aAAeO,EAAaE,eAIvCC,EAAyB/C,IC0B1BwD,CAAkBxD,IAEfA,EAAQP,MAAQwD,EAAaC,cAEhCd,EAAyBpC,GCjD3B,SAASyD,IAGR,GAFA/F,QAAQC,IAAI,8BAEM,qBAAPqF,EAAoB,CAE9BtF,QAAQC,IAAI,wBAED+F,SAASC,SAASC,KACdF,SAASC,SAASE,UAGjCb,EAAK,IAAIc,UAAU,sCAGhBC,OAAS,WACXrG,QAAQC,IAAI,qBACI,GAGjBqF,EAAGgB,QAAU,SAAUC,GACtBvG,QAAQC,IAAI,2BAA4BsG,IACxB,GAGjBjB,EAAGkB,QAAU,SAAUC,GACtBzG,QAAQC,IAAI,mBACZD,QAAQC,IAAI,eAAgBwG,EAAIC,OAEjCpB,EAAGqB,UAAY,SAAUnH,GACxBQ,QAAQC,IAAI,oBACZ4F,EAAqB/F,KAAK8G,MAAMpH,EAAMkH,S,IC4I1BG,E,2MA1Kb3H,MAAQ,CACNoG,GAAI,GACJnF,SAAU,KACV2G,eAAe,EACfC,eAAe,EACf3C,cAAe,GACfX,MAAO,CAAC,IACRZ,OAAQ,CAAC,eAAgB,kBAAmB,gB,EAO9CkD,QAAU,WACR,IAAIT,EAAK,EAAKpG,MAAMoG,GACA,EAAKpG,MAAM4H,cAG/B,GAFA9G,QAAQC,IAAI,8BAEU,KAAlB,EAAKf,MAAMoG,GAAW,CAExBtF,QAAQC,IAAI,wBAED+F,SAASC,SAASC,KACdF,SAASC,SAASE,SAEjCb,EAAK,IAAIc,UAAU,qCAEnB,EAAK1G,SAAS,CAAE4F,OAEhBA,EAAGe,OAAS,WACVrG,QAAQC,IAAI,oBACZ,EAAKP,SAAS,CAAEoH,eAAe,IAAQ,WACrC,EAAKE,uBAKT1B,EAAGgB,QAAU,SAACC,GACZvG,QAAQC,IAAI,2BAA4BsG,GACxC,EAAK7G,SAAS,CAAEoH,eAAe,IAC/B,EAAKpH,SAAS,CAAE4F,GAAI,MAGtBA,EAAGkB,QAAU,SAACC,GACZzG,QAAQC,IAAI,mBACZD,QAAQC,IAAI,eAAgBwG,EAAIC,OAElCpB,EAAGqB,UAAY,SAACnH,GACdQ,QAAQC,IAAI,oBACZ,EAAK4F,qBAAqB/F,KAAK8G,MAAMpH,EAAMkH,U,EAKjDxG,KAAO,SAACoC,GACN,IAAIgD,EAAK,EAAKpG,MAAMoG,GACA,EAAKpG,MAAM4H,cAG7BxB,EAAGpF,KAAKoC,IAERyD,IACAkB,YAAW,WAAc3B,EAAGpF,KAAKoC,KAAa,O,EAIlD0E,iBAAmB,WACjB,IAAInH,EAAOC,KAAKC,UAAU,CACxB,KAAQ,eACR,YAAe,uBACf,QAAW,KAEb,EAAKG,KAAKL,I,EAGZmE,SAAW,SAACH,GACV,EAAKnE,SAAS,CAACmD,OAAM,CAAIgB,GAAJ,mBAAc,EAAK3E,MAAM2D,Y,EAGhDgD,qBAAuB,SAACvD,GACtBtC,QAAQC,IAAIqC,GACQ,qBAAhBA,EAAQ/B,MACV,EAAKuF,kBAAkBxD,GAEL,gBAAhBA,EAAQP,MACV,EAAK2C,yBAAyBpC,I,EAIlCwD,kBAAoB,SAACxD,GAEC,qBAAhBA,EAAQ/B,KACV,EAAK8E,yBAAyB/C,GAEP,kBAAhBA,EAAQ/B,MACf,EAAK8E,yBAAyB/C,I,mFArFhC7C,KAAKsG,Y,+CAyFkBzD,GACvBtC,QAAQC,IAAIqC,GACZ7C,KAAKC,SAAS,CAAE0E,cAAe9B,M,0CAGbA,GAClBtC,QAAQC,IAAIqC,GACZ7C,KAAKC,SAAS,CAAE0E,cAAe9B,M,+CAGRA,GACI,SAAvBA,EAAQqC,aACVlF,KAAKuF,qBAAqB1C,GAED,eAAvBA,EAAQqC,aACVlF,KAAKwF,0BAA0B3C,GAEN,wBAAvBA,EAAQqC,aACVlF,KAAKyH,kBAAkB5E,K,2CAINA,GACfA,EAAQZ,QAAQoB,SAAS,YAC3BrD,KAAKC,SAAS,CAAES,SAAUmC,EAAQlC,KAClCJ,QAAQC,IAAIqC,GACZtC,QAAQC,IAAI,mDACZR,KAAKC,SAAS,CAAEqH,eAAe,KACtBzE,EAAQZ,QAAQoB,SAAS,aAClCgC,MAAM,uDACN9E,QAAQC,IAAI,iE,gDAIUqC,GACpBA,EAAQZ,QAAQoB,SAAS,YAC3BgC,MAAM,wDACN9E,QAAQC,IAAI,+BAELqC,EAAQZ,QAAQoB,SAAS,aAChCgC,MAAM,wDACN9E,QAAQC,IAAI,kE,wCAIEqC,GAChBtC,QAAQC,IAAIqC,EAAQZ,SACpB,IAAMyF,EAAW7E,EAAQZ,QAAQ0F,MAAM,KACvC3H,KAAKC,SAAS,CAAC+D,MAAQ0D,M,+BAIf,IAAD,OACP,OAEE,kBAAC,IAAD,CAAQE,SAAS,WACf,yBAAKhH,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAQF,SAAUV,KAAKP,MAAMiB,WAC7B,kBAAC,IAAD,CAAOmH,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAACC,GAAD,OAAiB,kBAAC,EAAD,iBAAeA,EAAf,CAA2B1B,QAAS,EAAKA,QAAS7F,KAAM,EAAKA,KAAMC,SAAU,EAAKjB,MAAMiB,eACvI,kBAAC,IAAD,CAAOoH,KAAK,SAASG,UAAWvG,IAChC,kBAAC,IAAD,CAAOoG,KAAK,sBAAsBC,OAAQ,SAACC,GAAD,OAAiB,kBAAC,EAAD,iBAAeA,EAAf,CAA2B1B,QAAS,EAAKA,QAAS7F,KAAM,EAAKA,KAAMC,SAAU,EAAKjB,MAAMiB,SAAUiE,cAAe,EAAKlF,MAAMkF,cAAeX,MAAO,EAAKvE,MAAMuE,MAAOZ,OAAQ,EAAK3D,MAAM2D,OAAQmB,SAAU,EAAKA,sB,GAlKnQnD,a,MCNlB8G,IAASH,OAAO,kBAAC,EAAD,MAASxB,SAAS4B,eAAe,W","file":"static/js/main.cfc2aad5.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport './App.css';\r\n\r\nclass LoginPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { value: '' };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n        this.handleCreate = this.handleCreate.bind(this);\r\n\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    handleLogin(event) {\r\n        event.preventDefault();\r\n        //Send user creation request\r\n        var json = JSON.stringify({\r\n            \"type\": \"USER_SERVICE\",\r\n            \"contentType\": \"LOGIN\",\r\n            \"content\": this.state.value\r\n        });\r\n\r\n        console.log(\"Logging in as %s\", this.state.value)\r\n\r\n        this.props.send(json);\r\n    }\r\n\r\n    handleCreate(event) {\r\n        event.preventDefault();\r\n\r\n        var json = JSON.stringify({\r\n            \"type\": \"USER_SERVICE\",\r\n            \"contentType\": \"USER_CREATE\",\r\n            \"content\": this.state.value\r\n        });\r\n\r\n        console.log(\"Creating new user: %s\", this.state.value)\r\n        this.props.send(json);\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return this.props.username !==  null ? (\r\n            <Redirect to=\"/chat\" />\r\n        ) : (\r\n                <div className=\"section is-fullheight\">\r\n                    <div className=\"container\">\r\n                        <div className=\"column is-4 is-offset-4\">\r\n                            <div className=\"box\">\r\n                                <form onSubmit={this.handleLogin}>\r\n                                    <div className=\"field\">\r\n                                        <label className=\"label\">User Name</label>\r\n                                        <div className=\"control\">\r\n                                            <input className=\"input\" type=\"text\" name=\"username\" autoComplete=\"off\" onChange={this.handleChange} />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"buttons is-grouped\">\r\n                                        <button type=\"button\" className=\"button is-block is-info is-fullwidth\" onClick={this.handleLogin}>Login</button>\r\n                                        <button type=\"button\" className=\"button is-block is-info is-fullwidth\" onClick={this.handleCreate}>Create</button>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default LoginPage;","import { Link } from 'react-router-dom'\r\nimport React, { Component } from 'react'\r\n\r\nexport class Header extends Component {\r\n\r\n    state = {\r\n        display: 'TautChat'\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        // Typical usage (don't forget to compare props):\r\n        if (this.props.username !== prevProps.username) {\r\n            var display = \"Hi, \" + this.props.username + \"!\"\r\n            this.setState({ display: display })\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <nav class=\"breadcrumb is-centered is-medium has-bullet-separator\" aria-label=\"breadcrumbs\">\r\n                <h1 class=\"title is-2\">{this.state.display}</h1>\r\n                <ul>\r\n                    <li><Link to=\"/\">Home</Link></li>\r\n                    <li><Link to=\"/chat\">Chat</Link></li>\r\n                    <li><Link to=\"/about\">About</Link></li>\r\n                </ul>\r\n            </nav>\r\n            // <header>\r\n\r\n\r\n            // </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","import React, { Component } from 'react'\r\n\r\nexport class About extends Component {\r\n\r\n    getStyle() {\r\n        return {\r\n            fontSize: '12px',\r\n            padding: '30px',\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div style={this.getStyle()}>\r\n                    <p>TautChat was established in 2019 by 4 dashing young professionals looking to expand their careers into the world of software development. They would like to thank to the following people for their support during development:</p>\r\n                    <p>Michael Weintraub</p>\r\n                    <p>Vaibhav Dave</p>\r\n                    <p>Alex Grob</p>\r\n\r\n                </div>\r\n\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default About","import React, { Component } from 'react'\r\n\r\nexport class AddMessage extends Component {\r\n    state = {\r\n        content: ''\r\n    }\r\n\r\n    onChange = (e) => this.setState({ [e.target.name]: e.target.value });\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addMessage(this.state.content);\r\n        this.setState({ content: '' })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit}>\r\n                <input\r\n                    className = \"input\"\r\n                    type=\"text\"\r\n                    name=\"content\"\r\n                    placeholder=\"Type Message\"\r\n                    autoComplete=\"off\"\r\n                    value={this.state.content}\r\n                    onChange={this.onChange}\r\n                />\r\n            </form>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddMessage","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class MessageItem extends Component {\r\n    getStyle = (from) => {\r\n        if (this.props.username === from) {\r\n            return {\r\n                fontSize: '20px',\r\n                textAlign: 'right',\r\n                padding: '10px',\r\n            }\r\n        }\r\n        else {\r\n            return {\r\n                fontSize: '20px',\r\n                textAlign: 'left',\r\n                padding: '10px',\r\n            }\r\n        }\r\n    }\r\n\r\n    getNameStyle = (from) => {\r\n        return {\r\n            fontSize: '14px',\r\n            padding: '1px',\r\n        }\r\n    }\r\n\r\n    getFontStyle = (sentiment) => {\r\n        var sentTest = sentiment.charAt(0);\r\n\r\n\r\n        switch (sentTest) {\r\n\r\n            case \"0\":\r\n                return {\r\n                    color: '#FF0000'\r\n                }\r\n\r\n            case \"1\":\r\n                return {\r\n                    color: '#696969'\r\n                }\r\n\r\n            case \"2\":\r\n                return {\r\n                    color: '#7CFC00'\r\n                }\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const { from, to, content, sentiment } = this.props.message;\r\n\r\n        return (\r\n            <div style={this.getStyle(from)}>\r\n                <p style={this.getNameStyle()}>\r\n                    {from}\r\n                </p>\r\n                <p style={this.getFontStyle(sentiment)}>\r\n                    {content}\r\n                </p>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nMessageItem.propTypes = {\r\n    message: PropTypes.object.isRequired\r\n}\r\n\r\nexport default MessageItem","import React, { Component } from 'react';\r\nimport MessageItem from './MessageItem'\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Messages extends Component {\r\n    filtered = (these) => {\r\n        const messageWith = this.props.messageWith\r\n        const currentUser = this.props.username\r\n        var newMessages\r\n        var newMessages1\r\n\r\n        if (this.props.groups.includes(messageWith)) {\r\n            //Filter Group Message\r\n            console.log(\"Filtering Group\")\r\n            newMessages1 = these.filter(messages =>(messages.to === messageWith))\r\n        }\r\n        else {\r\n            //Direct Message Filtering\r\n            console.log(\"Filtering Direct\")\r\n            newMessages = these.filter(messages =>\r\n                ((messages.from === currentUser) || (messages.from === messageWith)));\r\n            newMessages1 = newMessages.filter(messages =>\r\n                ((messages.to === currentUser) || (messages.to === messageWith)));\r\n            \r\n        }\r\n\r\n        return newMessages1;\r\n    }\r\n\r\n\r\n    render() {\r\n        return this.filtered(this.props.messages).map((message) => (\r\n            <MessageItem message={message} filterMessages={this.filterMessages} username={this.props.username} messageWith={this.props.messageWith}/>\r\n        ));\r\n    }\r\n}\r\n\r\nMessages.propTypes = {\r\n    messages: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Messages;","import React, { Component } from 'react'\r\n\r\nexport class ToField extends Component {\r\n\r\n    state = {\r\n        messageWith: ''\r\n    }\r\n\r\n    onChange = (e) => {\r\n\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        }, () => {\r\n            this.props.setTo(this.state.messageWith);\r\n        });\r\n\r\n    }\r\n\r\n    getStyle() {\r\n        return {\r\n            textAlign: 'left'\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div >\r\n                <h1 class=\"subtitle is-3\" style={this.getStyle()}>{this.props.messageWith}</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToField","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Users extends Component {\r\n\r\n    setMessageWith = (a) => {\r\n        this.props.setTo(a);\r\n    }\r\n\r\n    filtered = (these) => {\r\n        return these.filter(item => (item !== this.props.username))\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return this.filtered(this.props.users).map((user) => (\r\n            <li>\r\n                <button class=\"button is-white is-fullwidth\" onClick={() => this.setMessageWith(user)}>{user}</button>\r\n            </li>\r\n        ));\r\n    }\r\n}\r\n\r\nUsers.propTypes = {\r\n    users: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Users;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Groups extends Component {\r\n\r\n    setGroup = (a) => {\r\n        this.props.setTo(a);\r\n    }\r\n\r\n    render() {\r\n        return this.props.groups.map((group) => (\r\n            <li>\r\n                <button class=\"button is-white is-fullwidth\" onClick={() => this.setGroup(group)}>{group}</button>\r\n            </li>\r\n        ));\r\n\r\n    }\r\n}\r\n\r\nGroups.propTypes = {\r\n    groups: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Groups;","import React, { Component } from 'react'\r\n\r\nexport class NewGroup extends Component {\r\n    state = {\r\n        newGroup: ''\r\n    }\r\n\r\n    onChange = (e) => this.setState({ [e.target.name]: e.target.value });\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addGroup(this.state.newGroup);\r\n        this.setState({ newGroup: '' })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit}>\r\n                <input\r\n                    className=\"input is-small\"\r\n                    type=\"text\"\r\n                    name=\"newGroup\"\r\n                    placeholder=\"New Group\"\r\n                    autoComplete=\"off\"\r\n                    value={this.state.newGroup}\r\n                    onChange={this.onChange}\r\n                />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewGroup","import React, { Component } from 'react';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport AddMessage from './AddMessage';\r\nimport Messages from './Messages';\r\nimport ToField from './ToField';\r\nimport Users from './Users';\r\nimport Groups from './Groups'\r\nimport NewGroup from './NewGroup'\r\n\r\nclass Messenger extends Component {\r\n\r\n    state = {\r\n        messageWith: '',\r\n        messages: [],\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        // Typical usage (don't forget to compare props):\r\n        if (this.props.queuedMessage !== prevProps.queuedMessage) {\r\n            this.setState({\r\n                messages: [...this.state.messages, this.props.queuedMessage]\r\n            }, () => {\r\n                console.log(this.state.messages)\r\n                // this.filterMessages();\r\n            });\r\n            // this.setState      \r\n            // this.addToChatBox(this.props.queuedMessage)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    filterMessages = () => {\r\n\r\n        if (this.props.groups.includes(this.state.messageWith)) {\r\n            //Filter Group Message\r\n            const messageWith = this.state.messageWith\r\n            const currentUser = this.props.username\r\n            const newMessages1 = this.state.messages.filter(messages =>\r\n                (messages.to === messageWith));\r\n            this.setState({ messages: newMessages1 });\r\n        }\r\n        else {\r\n            //Direct Message Filtering\r\n            const messageWith = this.state.messageWith\r\n            const currentUser = this.props.username\r\n            const newMessages = this.state.messages.filter(messages =>\r\n                ((messages.from === currentUser) || (messages.from === messageWith)));\r\n            const newMessages1 = newMessages.filter(messages =>\r\n                ((messages.to === currentUser) || (messages.to === messageWith)));\r\n            this.setState({ messages: newMessages1 });\r\n        }\r\n\r\n\r\n    };\r\n\r\n    addToChatBox = (newMessage) => {\r\n        this.setState({\r\n            messages: [...this.state.messages, newMessage]\r\n        }, () => {\r\n            this.filterMessages();\r\n        });\r\n    }\r\n\r\n    setTo = (to) => {\r\n        this.setState({ messageWith: to })//, () => {\r\n        // this.filterMessages();\r\n        // });\r\n    }\r\n\r\n    addGroup = (group) => {\r\n        this.props.addGroup(group)\r\n        // console.log(\"Add the group\")\r\n        var json = JSON.stringify({\r\n            \"type\": \"GROUP_SERVICE\",\r\n            \"contentType\": \"GROUP_CREATE\",\r\n            \"content\": group\r\n        });\r\n\r\n        this.props.send(json);\r\n    }\r\n\r\n    //Add Item\r\n    addMessage = (content) => {\r\n        if (this.props.groups.includes(this.state.messageWith)) {\r\n            //Send group message\r\n            var json = JSON.stringify({\r\n                \"type\": \"BROADCAST_MESSAGE\",\r\n                \"from\": this.props.username,\r\n                \"to\": this.state.messageWith,\r\n                \"contentType\": \"GROUP_MESSAGE\",\r\n                \"content\": content\r\n            });\r\n        }\r\n        else if (this.props.users.includes(this.state.messageWith)) {\r\n            var json = JSON.stringify({\r\n                \"type\": \"BROADCAST_MESSAGE\",\r\n                \"from\": this.props.username,\r\n                \"to\": this.state.messageWith,\r\n                \"contentType\": \"ASCII\",\r\n                \"content\": content\r\n            });\r\n        }\r\n        this.props.send(json);\r\n    }\r\n\r\n    sendSearchForUsernameMessage(username) {\r\n        //Send user creation request\r\n        var json = JSON.stringify({\r\n            \"type\": \"USER_SERVICE\",\r\n            \"contentType\": \"SEARCH_USERS_BY_NAME\",\r\n            \"content\": username\r\n        });\r\n        this.props.send(json);\r\n    }\r\n\r\n    render() {\r\n\r\n        return this.props.username === null ? (\r\n            <Redirect to=\"/\" />\r\n        ) : (\r\n                <div className=\"container\">\r\n                    <div className=\"columns is-mobile\">\r\n                        <div className=\"column is-narrow\">\r\n                            <h1 class=\"title\">Users</h1>\r\n                            <React.Fragment>\r\n                                <Users users={this.props.users} setTo={this.setTo} username={this.props.username} />\r\n                            </React.Fragment>\r\n                            <h1 class=\"title\">Groups</h1>\r\n                            <React.Fragment>\r\n                                <NewGroup addGroup={this.addGroup} />\r\n                                <Groups groups={this.props.groups} setTo={this.setTo} />\r\n                            </React.Fragment>\r\n                        </div>\r\n                        <div className=\"column\">\r\n                            <React.Fragment>\r\n                                <ToField messageWith={this.state.messageWith} />\r\n                                <Messages messages={this.state.messages} username={this.props.username} messageWith={this.state.messageWith} groups={this.props.groups} />\r\n                                <AddMessage addMessage={this.addMessage} />\r\n                            </React.Fragment>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div >\r\n            );\r\n    }\r\n}\r\n\r\nexport default Messenger;","import {genericMessageResponses} from './GeneralMessageRouter';\r\nimport { withRouter } from 'react-router'\r\n\r\nvar status_label;\r\n\r\n/* Enumeration for message types service messages\r\n * \r\n */\r\n\r\nconst colors = {\r\n\t    RED:  '#d00',\r\n\t    GREEN: '#009d00'\r\n}\r\n \r\nconst userServiceContent = {\r\n\t\r\n\t  /**\r\n\t   * Represents Login Command\r\n\t   */\r\n\t   LOGIN: 'LOGIN',\r\n\t  /**\r\n\t   * Represents User Create Command\r\n\t   */\r\n\t   USER_CREATE: 'USER_CREATE',\r\n\t  /**\r\n\t   * Represents Search for User by Name Command \r\n\t   */\r\n\t   SEARCH_USERS_BY_NAME: 'SEARCH_USERS_BY_NAME',\r\n\t  /**\r\n\t   * Represents a Front User Command (TODO Hookup backend)\r\n\t   */\r\n\t   FRIEND_USER: 'FRIEND_USER',\r\n\t   \r\n}\r\n\r\n\r\n\r\n/* Routes received user service messages to correct logic\r\n * \r\n * @param json message - json of user service type message\r\n */\r\nfunction userServiveMessageRouter(message) {\r\n\t\r\n\t//  Check if it's a login response\r\n\tif (message.contentType == userServiceContent.LOGIN) {\r\n\t\tprocessLoginResponse(message);\r\n\t}\r\n\t\r\n\t//  Check if it's a create user response\r\n\tif (message.contentType == userServiceContent.USER_CREATE) {\r\n\t\t//  process chat message\r\n\t\tprocessUserCreateResponse(message);\r\n\t}\r\n\t\r\n\t//  Check if it's a create user response\r\n\tif (message.contentType == userServiceContent.SEARCH_USERS_BY_NAME) {\r\n\t\t//  process chat message\r\n\t\tprocessUserSearchResponse(message);\r\n\t}\r\n\r\n}\r\n\r\n\r\n//TODO Chad add your Swap this for your GUI references\r\n\r\n/* Process server response for user login\r\n*\r\n* @param json message - json of user service type message of login response\r\n*/\r\nfunction processLoginResponse(message){\r\n\tif (message.content.includes(genericMessageResponses.SUCCESS)){\r\n\t\tconsole.log(\"SUCCESS: User successfully logged into session.\");\r\n\t\talert(\"User successfully logged into session.\");\r\n\t\t// If unsuccessful this should run\r\n\t\t// status_label.style.color = colors.GREEN;\r\n\t    // status_label.innerHTML =  \"SUCCESS: User successfully logged into session.\";\t\r\n\t}else if (message.content.includes(genericMessageResponses.FAILURE)){\r\n\t\tconsole.log(\"ERROR: User Name Does not Exist. Please Create User First.\");\r\n\t\talert(\"User Name Does not Exist. Please Create User First.\");\r\n\t\t// If unsuccessful this should run\r\n\t\t// status_label.style.color = colors.RED;\r\n\t    // status_label.innerHTML =  \"ERROR: User Name Does not Exist. Please Create User First.\";\t\r\n\t}\r\n}\r\n\r\n//TODO Chad add your Swap this for your GUI references\r\n\r\n/*Process server response for user creation\r\n * \r\n* @param json message - json of user service type message of create user response\r\n */\r\nfunction processUserCreateResponse(message){\r\n\tif (message.content.includes(genericMessageResponses.SUCCESS)){\r\n\t\tconsole.log(\"User Successfully Created!\");   \r\n\t\talert(\"User Successfully Created!\"); \r\n\t\t//If successful this should run\r\n\t\t// status_label.style.color = colors.GREEN;\r\n\t\t// status_label.innerHTML =  \"User Successfully Created!\";\r\n\t}else if (message.content.includes(genericMessageResponses.FAILURE)){\r\n\t\tconsole.log(\"ERROR: Could Not Create User Name. Please Try Another Name.\");\r\n\t\talert(\"This User Name is already taken. Please Try Another Name.\");\r\n\t    // If unsuccessful this should run\r\n\t\t// status_label.style.color = colors.RED;\r\n\t\t// status_label.innerHTML =  \"ERROR: Could Not Create User Name. Please Try Another Name.\";\t\r\n\t}\r\n}\r\n\r\n\r\n/*Process server response for user friending\r\n * \r\n* @param json message - json of user service type message of user friend\r\n */\r\nfunction processFriendUserResponse(message){\r\n\t\r\n\t//TODO Chad add your GUI logic here\r\n\r\n\tif (message.content.includes(genericMessageResponses.SUCCESS)){\r\n\r\n\t}else if (message.content.includes(genericMessageResponses.FAILURE)){\r\n\r\n\t}\r\n}\r\n\r\n/*Process server response for searching for user names\r\n * \r\n* @param json message - json of user service type message of username search message\r\n */\r\nfunction processUserSearchResponse(message){\r\n\t//TODO Chad add your GUI logic here\r\n}\r\n\r\n\r\nexport {userServiveMessageRouter, userServiceContent};","import { messageTypes } from \"./GeneralMessageRouter\";\r\nimport Messenger from './Messenger';\r\n\r\n/* Enumeration for non-service message content types\r\n * \r\n */\r\nconst contentTypes = {\r\n\t/**\r\n\t* Represents Standard ASCII Text content\r\n\t*/\r\n\tASCII: 'ASCII',\r\n\r\n\t/**\r\n\t* Represents GROUP_MESSAGE ASCII content\r\n\t*/\r\n\tGROUP_MESSAGE: 'GROUP_MESSAGE',\r\n\t\r\n}\r\n\r\n/* Routes received user service messages to correct logic\r\n * \r\n * @param json message - json of user service type message\r\n */\r\nfunction chatMessageRouter(message) {\r\n\t//  Process Broadcast\r\n\tif (message.type == messageTypes.BROADCAST_MESSAGE) {\r\n\t\tprocessDirectChatMessage(message);\r\n\t} else if (message.type == messageTypes.DIRECT_MESSAGE) {\r\n\t\tif (message.contentType == contentTypes.GROUP_MESSAGE){\r\n\t\t\tprocessGroupMessage(message);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tprocessDirectChatMessage(message);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/* Processes recieved direct message chat\r\n * \r\n * @param json message - json of chat type message\r\n */\r\nfunction processDirectChatMessage(message) {\r\n\tconsole.log(\"I got something to use\");\r\n\tconsole.log(message);\r\n}\r\n\r\n/* Processes recieved broadcast message chat\r\n * \r\n * @param json message - json of chat type message\r\n */\r\nfunction processBroadcastChatMessage(message) {\r\n\t//TODO Chad put in GUI logic\r\n\r\n}\r\n\r\n\r\n\r\n/* Processes recieved group message chat\r\n * \r\n * @param json message - json of chat type message\r\n */\r\nfunction processGroupMessage(message) {\r\n\t//TODO Chad put in GUI logic\r\n}\r\n\r\n\r\n// TODO Chad, you can use these colors or do something else\r\n// I was just putting them here as an example\r\n\r\n/* Enumeration colors to use for sentiment\r\n * \r\n */\r\nconst sentimentColors = {\r\n    NEGATIVE:  '#d00', //Red\r\n    NEUTRAL: '\t#383838', //Dark Gray\r\n    POSITIVE: '#009d00' //Green\r\n}\r\n\r\n\r\n/* Enumeration representing positive, negative, and neutral sentiments\r\n* \r\n*/\r\nconst sentiment = {\r\n    NEGATIVE:  '0', \r\n    NEUTRAL: '1',\t \r\n    POSITIVE: '2' \r\n}\r\n\r\n//TODO Chad, I'm not sure how you'll want to display the sentiment information\r\n// in the GUI. Below is just an example of a template you can use to iterate through\r\n// The sentiments of the content.\r\n// The message.content should be the same size as the message.sentiment\r\n// Each character of the content has a sentiment value associated with it, either 0,1, or 2 (see the sentiment enumeration above)\r\n\r\n\r\n/* Template function that shows how content and sentiment are associate\r\n * Feel free to update this to something with useful functionality\r\n *  \r\n * @param json message - json of chat type message\r\n */\r\nfunction processSentimentContent(message){\r\n\t\r\n\t\r\n\tfor (var i = 0; i < message.content.length; i++) {\r\n\t\t  \r\n\t\tswitch(message.sentiment.charAt(i)){\r\n\t\t\t\r\n\t\t\tcase sentiment.NEGATIVE:\r\n\t\t\t\t//TODO chad feel free to add logic\r\n\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\tcase sentiment.POSITIVE:\r\n\t\t\t\t//TODO chad feel free to add logic\r\n\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\tcase sentiment.NEUTRAL:\r\n\t\t\t\t//TODO chad feel free to add logic\r\n\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n\r\nexport {contentTypes, chatMessageRouter}","\r\nimport { userServiveMessageRouter } from './UserServiceMessageProcessing'\r\nimport {chatMessageRouter} from './ChatMessageProcessing'\r\n\r\n/* Enumeration for message types service messages\r\n * \r\n */\r\nconst messageTypes = {\r\n\r\n\tUSER_SERVICE: 'USER_SERVICE',\r\n\t/**\r\n\t* Represents Session Service Address\r\n\t*/\r\n\tSESSION_SERVICE: 'SESSION_SERVICE',\r\n\t/**\r\n\t* Represents Group Service Address\r\n\t*/\r\n\tGROUP_SERVICE: 'GROUP_SERVICE',\r\n\t/**\r\n\t* Represents group message address\r\n\t*/\r\n\tGROUP_MESSAGE: 'GROUP_MESSAGE',\r\n    /**\r\n\t* Represents a direct message address\r\n\t*/\r\n\tDIRECT_MESSAGE: 'DIRECT_MESSAGE',\r\n    /**\r\n\t* Represents a broadcast message address\r\n\t*/\r\n\tBROADCAST_MESSAGE: 'BROADCAST_MESSAGE',\r\n\r\n}\r\n\r\n\r\n\r\nconst genericMessageResponses = {\r\n\t/**\r\n\t* Represents a Success message\r\n\t*/\r\n\tSUCCESS: 'SUCCESS',\r\n\t/**\r\n\t* Represents a Failure message\r\n\t*/\r\n\tFAILURE: 'FAILURE',\r\n\r\n}\r\n\r\n\r\n/* Routes received messages to correct logic\r\n * \r\n * @param json message - json of message\r\n */\r\nfunction generalMessageRouter(message) {\r\n\tconsole.log(\"General message router\")\r\n\tconsole.log(message);\r\n\tif (message.type == messageTypes.BROADCAST_MESSAGE) {\r\n\t\t// process chat message\r\n\t\tconsole.log(\"I'm going to go process this broadcast\")\r\n\t\tchatMessageRouter(message);\r\n\t}\r\n\tif (message.from == messageTypes.USER_SERVICE) {\r\n\t\t//  process user server message\r\n\t\tuserServiveMessageRouter(message);\r\n\t}\r\n}\r\n\r\n\r\nexport { generalMessageRouter, messageTypes, genericMessageResponses };","import { generalMessageRouter } from './GeneralMessageRouter'\r\nimport { sendLoginMessage, sendCreateUserMessage } from './UserServiceMessages'\r\n\r\nvar ws;\r\nvar username;\r\nvar active_socket = false;\r\n/* Enumeration for colors\r\n * \r\n */\r\n\r\n/* Connects to the server and sets up call back for messaging events\r\n * \r\n */\r\nfunction connect() {\r\n\tconsole.log('Checking Socket Connection');\r\n\r\n\tif (typeof ws === 'undefined') {\r\n\r\n\t\tconsole.log('Connecting to Socket');\r\n\r\n\t\tvar host = document.location.host;\r\n\t\tvar pathname = document.location.pathname;\r\n\r\n\t\t//Hard coded for testing purposes\r\n\t\tws = new WebSocket(\"ws://localhost:8080/prattle/chat/\");\r\n\t\t// ws = new WebSocket(\"ws://\" +host  + pathname + \"chat/\");\r\n\r\n\t\tws.onopen = function () {\r\n\t\t\tconsole.log('Connection open!');\r\n\t\t\tactive_socket = true;\r\n\t\t}\r\n\r\n\t\tws.onclose = function (code) {\r\n\t\t\tconsole.log(\"websocket closing. Code:\", code);\r\n\t\t\tactive_socket = false;\r\n\t\t}\r\n\r\n\t\tws.onerror = function (evt) {\r\n\t\t\tconsole.log(\"Websocket Error\");\r\n\t\t\tconsole.log(\"Error Code: \", evt.data);\r\n\t\t}\r\n\t\tws.onmessage = function (event) {\r\n\t\t\tconsole.log('Received Message');\r\n\t\t\tgeneralMessageRouter(JSON.parse(event.data));\r\n\r\n\t\t};\r\n\t}\r\n}\r\n\r\n/* Sends a message to the server\r\n*\r\n*/\r\nfunction send(message) {\r\n\t//If the server is already open then sent the message\r\n\tif (active_socket) {\r\n\t\tws.send(message)\r\n\t} else {\r\n\t\t//if server is not connected, then connect first\r\n\t\tconnect();\r\n\t\tsetTimeout(function () { ws.send(message); }, 500);\r\n\t}\r\n}\r\n\r\nexport { send, connect };","import React, { Component } from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport './App.css';\r\nimport LoginPage from './LoginPage';\r\nimport Header from './components/layout/Header';\r\nimport About from './components/pages/About';\r\nimport Messenger from './Messenger';\r\nimport { connect, send } from './WebSocket'\r\n\r\nclass App extends Component {\r\n  state = {\r\n    ws: '',\r\n    username: null,\r\n    active_socket: false,\r\n    authenticated: true,\r\n    queuedMessage: '',\r\n    users: [\"\"],\r\n    groups: [\"Kitty Lovers\", \"Science Project\", \"Taut Admins\"]\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.connect();\r\n  }\r\n\r\n  connect = () => {\r\n    var ws = this.state.ws\r\n    var active_socket = this.state.active_socket\r\n    console.log('Checking Socket Connection');\r\n\r\n    if (this.state.ws === '') {\r\n\r\n      console.log('Connecting to Socket');\r\n\r\n      var host = document.location.host;\r\n      var pathname = document.location.pathname;\r\n\r\n      ws = new WebSocket(\"ws://localhost:8080/prattle/chat/\");\r\n      // ws = new WebSocket(\"ws://\" +host  + pathname + \"chat/\");\r\n      this.setState({ ws })\r\n\r\n      ws.onopen = () => {\r\n        console.log('Connection open!');\r\n        this.setState({ active_socket: true }, () => {\r\n          this.retrieveAllUsers();\r\n          // this.filterMessages();\r\n        });\r\n      }\r\n\r\n      ws.onclose = (code) => {\r\n        console.log(\"websocket closing. Code:\", code);\r\n        this.setState({ active_socket: false })\r\n        this.setState({ ws: '' })\r\n      }\r\n\r\n      ws.onerror = (evt) => {\r\n        console.log(\"Websocket Error\");\r\n        console.log(\"Error Code: \", evt.data);\r\n      }\r\n      ws.onmessage = (event) => {\r\n        console.log('Received Message');\r\n        this.generalMessageRouter(JSON.parse(event.data));\r\n      };\r\n    }\r\n  }\r\n\r\n  send = (message) => {\r\n    var ws = this.state.ws\r\n    var active_socket = this.state.active_socket\r\n\r\n    if (active_socket) {\r\n      ws.send(message)\r\n    } else {\r\n      connect();\r\n      setTimeout(function () { ws.send(message); }, 500);\r\n    }\r\n  }\r\n\r\n  retrieveAllUsers = () => {\r\n    var json = JSON.stringify({\r\n      \"type\": \"USER_SERVICE\",\r\n      \"contentType\": \"SEARCH_USERS_BY_NAME\",\r\n      \"content\": \"\"\r\n    });\r\n    this.send(json);\r\n  }\r\n\r\n  addGroup = (group) => {\r\n    this.setState({groups : [group, ...this.state.groups]})\r\n  }\r\n\r\n  generalMessageRouter = (message) => {\r\n    console.log(message);\r\n    if (message.type == \"BROADCAST_MESSAGE\") {\r\n      this.chatMessageRouter(message);\r\n    }\r\n    if (message.from == \"USER_SERVICE\") {\r\n      this.userServiveMessageRouter(message);\r\n    }\r\n  }\r\n\r\n  chatMessageRouter = (message) => {\r\n    //  Process Broadcast\r\n    if (message.type == \"BROADCAST_MESSAGE\") {\r\n      this.processDirectChatMessage(message);\r\n    }\r\n    else if (message.type == \"DIRECT_MESSAGE\") {\r\n      this.processDirectChatMessage(message);\r\n    }\r\n  }\r\n\r\n  processDirectChatMessage(message) {\r\n    console.log(message);\r\n    this.setState({ queuedMessage: message })\r\n  }\r\n\r\n  processGroupMessage(message) {\r\n    console.log(message);\r\n    this.setState({ queuedMessage: message })\r\n  }\r\n\r\n  userServiveMessageRouter(message) {\r\n    if (message.contentType == \"LOGIN\") {\r\n      this.processLoginResponse(message);\r\n    }\r\n    if (message.contentType == \"USER_CREATE\") {\r\n      this.processUserCreateResponse(message);\r\n    }\r\n    if (message.contentType == \"SEARCH_USERS_BY_NAME\") {\r\n      this.processUserSearch(message);\r\n    }\r\n  }\r\n\r\n  processLoginResponse(message) {\r\n    if (message.content.includes(\"SUCCESS\")) {\r\n      this.setState({ username: message.to })\r\n      console.log(message)\r\n      console.log(\"SUCCESS: User successfully logged into session.\");\r\n      this.setState({ authenticated: true });\r\n    } else if (message.content.includes(\"FAILURE\")) {\r\n      alert(\"User Name Does not Exist. Please Create User First.\");\r\n      console.log(\"ERROR: User Name Does not Exist. Please Create User First.\");\r\n    }\r\n  }\r\n\r\n  processUserCreateResponse(message) {\r\n    if (message.content.includes(\"SUCCESS\")) {\r\n      alert(\"User successfully created. Please log in to continue\")\r\n      console.log(\"User Successfully Created!\");\r\n    }\r\n    else if (message.content.includes(\"FAILURE\")) {\r\n      alert(\"Could Not Create User Name. Please Try Another Name.\");\r\n      console.log(\"ERROR: Could Not Create User Name. Please Try Another Name.\");\r\n    }\r\n  }\r\n\r\n  processUserSearch(message) {\r\n    console.log(message.content)\r\n    const userList = message.content.split(',')\r\n    this.setState({users : userList});\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n\r\n      <Router basename=\"prattle\">\r\n        <div className=\"App\">\r\n          <div className=\"container\">\r\n            <Header username={this.state.username} />\r\n            <Route exact path=\"/\" render={(routeProps) => (<LoginPage {...routeProps} connect={this.connect} send={this.send} username={this.state.username}  />)} />\r\n            <Route path=\"/about\" component={About} />\r\n            <Route path=\"/chat/:messageWith?\" render={(routeProps) => (<Messenger {...routeProps} connect={this.connect} send={this.send} username={this.state.username} queuedMessage={this.state.queuedMessage} users={this.state.users} groups={this.state.groups} addGroup={this.addGroup}/>)} />\r\n          </div>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bulma/css/bulma.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}
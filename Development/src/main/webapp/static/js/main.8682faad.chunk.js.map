{"version":3,"sources":["logo.svg","messaging/userServiceMessageProcessing.js","messaging/generalMessageRouter.js","login.js","messaging/userServiceMessages.js","loginPage.js","chatPage.js","groupChatPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","userServiceContent","LOGIN","USER_CREATE","SEARCH_USERS_BY_NAME","FRIEND_USER","userServiveMessageRouter","message","document","getElementById","contentType","content","includes","genericMessageResponses","SUCCESS","console","log","alert","FAILURE","processLoginResponse","processUserCreateResponse","ws","messageTypes","USER_SERVICE","SESSION_SERVICE","GROUP_SERVICE","GROUP_MESSAGE","DIRECT_MESSAGE","BROADCAST_MESSAGE","active_socket","connect","location","host","pathname","WebSocket","onopen","onclose","code","onerror","evt","data","onmessage","event","JSON","parse","from","send","setTimeout","login","username","stringify","sendLoginMessage","createUser","sendCreateUserMessage","LoginPage","props","state","value","handleChange","bind","handleLogin","handleCreate","this","setState","target","preventDefault","className","onSubmit","handleSubmit","type","name","onChange","onClick","React","Component","Chat","chat","saveMsg","msg","class","PureComponent","ChatBox","e","elements","userInput","reset","placeholder","Messages","style","heigth","width","map","m","i","msgClass","padding","textAlign","overflowWrap","key","GroupChat","App","basename","to","path","Boolean","window","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8682faad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import {genericMessageResponses} from './generalMessageRouter';\r\nimport { withRouter } from 'react-router'\r\n\r\nvar status_label;\r\n\r\n/* Enumeration for message types service messages\r\n * \r\n */\r\n\r\nconst colors = {\r\n\t    RED:  '#d00',\r\n\t    GREEN: '#009d00'\r\n}\r\n \r\nconst userServiceContent = {\r\n\t\r\n\t  /**\r\n\t   * Represents Login Command\r\n\t   */\r\n\t   LOGIN: 'LOGIN',\r\n\t  /**\r\n\t   * Represents User Create Command\r\n\t   */\r\n\t   USER_CREATE: 'USER_CREATE',\r\n\t  /**\r\n\t   * Represents Search for User by Name Command \r\n\t   */\r\n\t   SEARCH_USERS_BY_NAME: 'SEARCH_USERS_BY_NAME',\r\n\t  /**\r\n\t   * Represents a Front User Command (TODO Hookup backend)\r\n\t   */\r\n\t   FRIEND_USER: 'FRIEND_USER',\r\n\t   \r\n}\r\n\r\n\r\n\r\n/* Routes received user service messages to correct logic\r\n * \r\n * @param json message - json of user service type message\r\n */\r\nfunction userServiveMessageRouter(message) {\r\n\r\n\tstatus_label = document.getElementById(\"login_status\");\r\n\t\r\n\t//  Check if it's a login response\r\n\tif (message.contentType == userServiceContent.LOGIN) {\r\n\t\tprocessLoginResponse(message);\r\n\r\n\t}\r\n\t\r\n\t//  Check if it's a create user response\r\n\tif (message.contentType == userServiceContent.USER_CREATE) {\r\n\t\t//  process chat message\r\n\t\tprocessUserCreateResponse(message);\r\n\t}\r\n\t\r\n\t//  Check if it's a create user response\r\n\tif (message.contentType == userServiceContent.SEARCH_USERS_BY_NAME) {\r\n\t\t//  process chat message\r\n\t\tprocessUserSearchResponse(message);\r\n\t}\r\n\r\n}\r\n\r\n\r\n//TODO Chad add your Swap this for your GUI references\r\n\r\n/* Process server response for user login\r\n*\r\n* @param json message - json of user service type message of login response\r\n*/\r\nfunction processLoginResponse(message){\r\n\tif (message.content.includes(genericMessageResponses.SUCCESS)){\r\n\t\tconsole.log(\"SUCCESS: User successfully logged into session.\");\r\n\t\talert(\"User successfully logged into session.\");\r\n\t\t// If unsuccessful this should run\r\n\t\t// status_label.style.color = colors.GREEN;\r\n\t    // status_label.innerHTML =  \"SUCCESS: User successfully logged into session.\";\t\r\n\t}else if (message.content.includes(genericMessageResponses.FAILURE)){\r\n\t\tconsole.log(\"ERROR: User Name Does not Exist. Please Create User First.\");\r\n\t\talert(\"User Name Does not Exist. Please Create User First.\");\r\n\t\t// If unsuccessful this should run\r\n\t\t// status_label.style.color = colors.RED;\r\n\t    // status_label.innerHTML =  \"ERROR: User Name Does not Exist. Please Create User First.\";\t\r\n\t}\r\n}\r\n\r\n//TODO Chad add your Swap this for your GUI references\r\n\r\n/*Process server response for user creation\r\n * \r\n* @param json message - json of user service type message of create user response\r\n */\r\nfunction processUserCreateResponse(message){\r\n\tif (message.content.includes(genericMessageResponses.SUCCESS)){\r\n\t\tconsole.log(\"User Successfully Created!\");   \r\n\t\talert(\"User Successfully Created!\"); \r\n\t\t//If successful this should run\r\n\t\t// status_label.style.color = colors.GREEN;\r\n\t\t// status_label.innerHTML =  \"User Successfully Created!\";\r\n\t}else if (message.content.includes(genericMessageResponses.FAILURE)){\r\n\t\tconsole.log(\"ERROR: Could Not Create User Name. Please Try Another Name.\");\r\n\t\talert(\"This User Name is already taken. Please Try Another Name.\");\r\n\t    // If unsuccessful this should run\r\n\t\t// status_label.style.color = colors.RED;\r\n\t\t// status_label.innerHTML =  \"ERROR: Could Not Create User Name. Please Try Another Name.\";\t\r\n\t}\r\n}\r\n\r\n\r\n/*Process server response for user friending\r\n * \r\n* @param json message - json of user service type message of user friend\r\n */\r\nfunction processFriendUserResponse(message){\r\n\t\r\n\t//TODO Chad add your GUI logic here\r\n\r\n\tif (message.content.includes(genericMessageResponses.SUCCESS)){\r\n\r\n\t}else if (message.content.includes(genericMessageResponses.FAILURE)){\r\n\r\n\t}\r\n}\r\n\r\n/*Process server response for searching for user names\r\n * \r\n* @param json message - json of user service type message of username search message\r\n */\r\nfunction processUserSearchResponse(message){\r\n\t//TODO Chad add your GUI logic here\r\n}\r\n\r\n\r\nexport {userServiveMessageRouter, userServiceContent};","\r\nimport {userServiveMessageRouter} from './userServiceMessageProcessing'\r\n\r\n/* Enumeration for message types service messages\r\n * \r\n */\r\nconst messageTypes = {\r\n\t\r\n\tUSER_SERVICE: 'USER_SERVICE',\r\n\t/**\r\n\t* Represents Session Service Address\r\n\t*/\r\n    SESSION_SERVICE: 'SESSION_SERVICE',\r\n\t/**\r\n\t* Represents Group Service Address\r\n\t*/\r\n    GROUP_SERVICE: 'GROUP_SERVICE',\r\n\t/**\r\n\t* Represents group message address\r\n\t*/\r\n    GROUP_MESSAGE: 'GROUP_MESSAGE\"',\r\n    /**\r\n\t* Represents a direct message address\r\n\t*/\r\n\tDIRECT_MESSAGE: 'DIRECT_MESSAGE\"',\r\n    /**\r\n\t* Represents a broadcast message address\r\n\t*/\r\n\tBROADCAST_MESSAGE: 'BROADCAST_MESSAGE',\r\n\r\n}\r\n\r\n\r\n\r\nconst genericMessageResponses = {\r\n\t\t/**\r\n\t\t* Represents a Success message\r\n\t\t*/\r\n\t\tSUCCESS: 'SUCCESS',\r\n\t\t/**\r\n\t\t* Represents a Failure message\r\n\t\t*/\r\n\t    FAILURE: 'FAILURE',\r\n\r\n\t}\r\n\r\n\r\n/* Routes received messages to correct logic\r\n * \r\n * @param json message - json of message\r\n */\r\nfunction generalMessageRouter(message) {\r\n\t\r\n\t// if (message.type == messageTypes.BROADCAST_MESSAGE) {\r\n\t// process chat message\r\n\t// processChatMessage(message);\r\n\t// }\r\n\t\r\n\t\r\n\tif (message.from == messageTypes.USER_SERVICE) {\r\n\t\t//  process user server message\r\n\t\tuserServiveMessageRouter(message);\r\n\t}\r\n\t\r\n}\r\n\r\n\r\nexport {generalMessageRouter, messageTypes, genericMessageResponses};","import {generalMessageRouter} from './messaging/generalMessageRouter'\r\nimport {sendLoginMessage, sendCreateUserMessage} from './messaging/userServiceMessages'\r\n\r\nvar ws;\r\nvar username;\r\nvar active_socket = false;\r\n/* Enumeration for colors\r\n * \r\n */\r\n \r\n/* Connects to the server and sets up call back for messaging events\r\n * \r\n */\r\nfunction connect() {\r\n\tconsole.log('Checking Socket Connection');\r\n\r\n\tif (typeof ws === 'undefined') {\r\n\t\t\t\t\r\n\t\tconsole.log('Connecting to Socket');\r\n\r\n\t\tvar host = document.location.host;\r\n\t\tvar pathname = document.location.pathname;\r\n\r\n\t\t ws = new WebSocket(\"ws://localhost:8080/prattle/chat/\");\r\n\t\t// ws = new WebSocket(\"ws://\" +host  + pathname + \"chat/\");\r\n\t\t\r\n\t\tws.onopen = function(){\r\n\t\t\tconsole.log('Connection open!');\r\n\t\t\tactive_socket = true;\r\n\t\t\t}\r\n\r\n\t\tws.onclose = function(code) {\r\n\t\t\tconsole.log(\"websocket closing. Code:\", code );\r\n\t\t\tactive_socket = false;\r\n\t\t}\r\n\t\r\n\t\tws.onerror= function(evt){\r\n\t\t\tconsole.log(\"Websocket Error\");\r\n\t\t\tconsole.log(\"Error Code: \", evt.data);\r\n\t\t}\r\n\t\tws.onmessage = function(event) {\r\n\t\t\tconsole.log('Received Message');\r\n\t\t\tconsole.log(event.data);\r\n\t\t\tgeneralMessageRouter(JSON.parse(event.data));\r\n\t    \r\n\t\t};\r\n\t}\r\n}\r\n\r\n/* Sends a message to the server\r\n*\r\n*/\r\nfunction send(message){\r\n\t//If the server is already open then sent the message\r\n\tif (active_socket){\r\n\t\tws.send(message)\r\n\t}else{\r\n\t\t//if server is not connected, then connect first\r\n\t\tconnect();\r\n\t    setTimeout(function(){ ws.send(message);},500);\r\n\t}\r\n\t\r\n}\r\n\r\n\r\n/* Sends a user login request to server\r\n * \r\n */\r\nfunction login(username) {\r\n\tsendLoginMessage(username);\r\n}\r\n\r\n/*Sends a user creation request to server\r\n * \r\n */\r\nfunction createUser(username) {\r\n\tsendCreateUserMessage(username)\t\r\n}\r\n\r\n\r\n\r\nexport {login, createUser, send};","import {messageTypes} from './generalMessageRouter'\r\nimport {userServiceContent} from './userServiceMessageProcessing'\r\nimport {send} from '../login'\r\n\r\n/* Sends a user login request to server\r\n * \r\n * @param username - user name to login into\r\n */\r\nfunction sendLoginMessage(username) {\r\n\t\r\n\t//Send user creation request\r\n    var json = JSON.stringify({\r\n    \t\"type\": messageTypes.USER_SERVICE,\r\n\t\t\"contentType\": userServiceContent.LOGIN,\r\n        \"content\": username\r\n    });\r\n    \r\n    send(json);\r\n    \r\n}\r\n\r\n/*Sends a user creation request to server\r\n * \r\n * @param username - user name to create\r\n */\r\nfunction sendCreateUserMessage(username) {\r\n\r\n\t//Send user creation request\r\n    var json = JSON.stringify({\r\n    \t\"type\": messageTypes.USER_SERVICE,\r\n\t\t\"contentType\": userServiceContent.USER_CREATE,\r\n        \"content\": username\r\n   });\r\n   send(json);\r\n}\r\n\r\n\r\n\r\n/*Sends a user name search request to server\r\n * \r\n * @param username - user name search for, could be partial characters\r\n */\r\nfunction sendSearchForUsernameMessage(username) {\r\n\t//Send user creation request\r\n    var json = JSON.stringify({\r\n    \t\"type\": messageTypes.USER_SERVICE,\r\n\t\t\"contentType\": userServiceContent.SEARCH_USERS_BY_NAME,\r\n        \"content\": username\r\n   });\r\n    \r\n   send(json);\r\n}\r\n\r\n/*Sends a user friend request to server\r\n * \r\n * @param username - user name to friend\r\n */\r\nfunction sendFriendUser(username) {\r\n\r\n\t//Send user creation request\r\n    var json = JSON.stringify({\r\n    \t\"type\": messageTypes.USER_SERVICE,\r\n\t\t\"contentType\": userServiceContent.FRIEND_USER,\r\n        \"content\": username\r\n   });\r\n    \r\n   send(json);\r\n}\r\n\r\nexport {sendLoginMessage, sendCreateUserMessage};","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { login, createUser } from './login'\r\nimport { useAlert } from 'react-alert'\r\n\r\nclass LoginPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { value: '' };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n        this.handleCreate = this.handleCreate.bind(this);\r\n\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    handleLogin(event) {\r\n        event.preventDefault();\r\n        login(this.state.value);\r\n    }\r\n\r\n    handleCreate(event) {\r\n        event.preventDefault();\r\n        createUser(this.state.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"section is-fullheight\">\r\n                <div className=\"container\">\r\n                    <div className=\"column is-4 is-offset-4\">\r\n                        <div className=\"box\">\r\n                            <form onSubmit={this.handleSubmit}>\r\n                                <div className=\"field\">\r\n                                    <label className=\"label\">User Name</label>\r\n                                    <div className=\"control\">\r\n                                        <input className=\"input\" type=\"text\" name=\"username\" onChange={this.handleChange} />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"buttons is-grouped\">\r\n                                    <button type=\"button\" className=\"button is-block is-info is-fullwidth\" onClick={this.handleLogin}>Login</button>\r\n                                    <button type=\"button\" className=\"button is-block is-info is-fullwidth\" onClick={this.handleCreate}>Create</button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginPage;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass Chat extends React.PureComponent {\r\n\r\n    state = {\r\n        chat: ['Hi', 'Hey', 'Good chat']\r\n    }\r\n\r\n    saveMsg = (msg) => this.setState({\r\n        chat: [\r\n            ...this.state.chat,\r\n            msg\r\n        ]\r\n    })\r\n\r\n    render() {\r\n        return (\r\n            <div class=\"columns\">\r\n                <div class=\"column is-narrow\">\r\n                    <aside class=\"menu\">\r\n                        <p class=\"menu-label\">\r\n                            Users\r\n                        </p>\r\n                        <ul class=\"menu-list\">\r\n                            <li><a>Michael</a></li>\r\n                            <li><a>Karen</a></li>\r\n                        </ul>\r\n                        <p class=\"menu-label\">\r\n                            Groups\r\n                        </p>\r\n                        <ul class=\"menu-list\">\r\n                            <li><a>New Group</a></li>\r\n                            <li><a>Cat Lovers</a></li>\r\n                            <li><a>Slack Users</a></li>\r\n                            <li><a>Frisbee Team</a></li>\r\n                            <li><a>The boys</a></li>\r\n                        </ul>\r\n                    </aside>\r\n                </div>\r\n                <div class=\"column\">\r\n                    <div class=\"container\">\r\n                        <div class=\"box\">\r\n                            <div class=\"section has-height-100\">\r\n                                <Messages chat={this.state.chat} />\r\n                            </div>\r\n\r\n                            <div class=\"section-foot\">\r\n                                <footer class=\"section\">\r\n                                    <ChatBox saveMsg={this.saveMsg} />\r\n                                </footer>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst ChatBox = ({ saveMsg }) => (\r\n    <form onSubmit={(e) => {\r\n        e.preventDefault();\r\n        saveMsg(e.target.elements.userInput.value);\r\n        e.target.reset();\r\n    }}>\r\n        <div class=\"field has-addons\">\r\n            <div class=\"control is-expanded\">\r\n                <input class=\"input\" name=\"userInput\" type=\"text\" placeholder=\"Type your message\" />\r\n            </div>\r\n            <div class=\"control\">\r\n                <button class=\"button is-info\">\r\n                    Send\r\n          </button>\r\n            </div>\r\n        </div>\r\n    </form>\r\n);\r\n\r\nconst Messages = ({ chat }) => (\r\n    <div style={{ heigth: '100%', width: '100%' }}>\r\n        {chat.map((m, i) => {\r\n            const msgClass = i === 0 || i % 2 === 0 // for demo purposes, format every other msg\r\n            return (\r\n                <p style={{ padding: '.25em', textAlign: msgClass ? 'left' : 'right', overflowWrap: 'normal' }}>\r\n                    <span key={i} class={`tag is-medium ${msgClass ? 'is-success' : 'is-info'}`}>{m}</span>\r\n                </p>\r\n            )\r\n        }\r\n        )}\r\n    </div>\r\n);\r\n\r\nexport default Chat;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass GroupChat extends React.PureComponent {\r\n\r\n    state = {\r\n        chat: ['Karen: Whats up friends', 'Whats the plan for today?', 'Matt: Day drinking!']\r\n    }\r\n\r\n    saveMsg = (msg) => this.setState({\r\n        chat: [\r\n            ...this.state.chat,\r\n            msg\r\n        ]\r\n    })\r\n\r\n    render() {\r\n        return (\r\n            <div class=\"columns\">\r\n                <div class=\"column is-one-fifth\">\r\n                    <aside class=\"menu\">\r\n                        <p class=\"menu-label\">\r\n                            Users\r\n                        </p>\r\n                        <ul class=\"menu-list\">\r\n                            <li><a>Michael</a></li>\r\n                            <li><a>Karen</a></li>\r\n                        </ul>\r\n                        <p class=\"menu-label\">\r\n                            Groups\r\n                        </p>\r\n                        <ul class=\"menu-list\">\r\n                            <li><a>New Group</a></li>\r\n                            <li><a>Cat Lovers</a></li>\r\n                            <li><a>Slack Users</a></li>\r\n                            <li><a>Frisbee Team</a></li>\r\n                            <li><a>The boys</a></li>\r\n                        </ul>\r\n                    </aside>\r\n                </div>\r\n                <div class=\"column\">\r\n                    <div class=\"container\">\r\n                        <div class=\"box\">\r\n                            <div class=\"section has-height-100\">\r\n                                <Messages chat={this.state.chat} />\r\n                            </div>\r\n\r\n                            <div class=\"section-foot\">\r\n                                <footer class=\"section\">\r\n                                    <ChatBox saveMsg={this.saveMsg} />\r\n                                </footer>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst ChatBox = ({ saveMsg }) => (\r\n    <form onSubmit={(e) => {\r\n        e.preventDefault();\r\n        saveMsg(e.target.elements.userInput.value);\r\n        e.target.reset();\r\n    }}>\r\n        <div class=\"field has-addons\">\r\n            <div class=\"control is-expanded\">\r\n                <input class=\"input\" name=\"userInput\" type=\"text\" placeholder=\"Type your message\" />\r\n            </div>\r\n            <div class=\"control\">\r\n                <button class=\"button is-info\">\r\n                    Send\r\n          </button>\r\n            </div>\r\n        </div>\r\n    </form>\r\n);\r\n\r\nconst Messages = ({ chat }) => (\r\n    <div style={{ heigth: '100%', width: '100%' }}>\r\n        {chat.map((m, i) => {\r\n            const msgClass = i === 0 || i % 2 === 0 // for demo purposes, format every other msg\r\n            return (\r\n                <p style={{ padding: '.25em', textAlign: msgClass ? 'left' : 'right', overflowWrap: 'normal' }}>\r\n                    <span key={i} class={`tag is-medium ${msgClass ? 'is-success' : 'is-info'}`}>{m}</span>\r\n                </p>\r\n            )\r\n        }\r\n        )}\r\n    </div>\r\n);\r\n\r\nexport default GroupChat;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  withRouter\n} from \"react-router-dom\";\nimport logo from './logo.svg';\nimport './App.css';\nimport LoginPage from './loginPage';\nimport Chat from './chatPage';\nimport GroupChat from './groupChatPage';\n\nfunction App() {\n  return (\n    <Router basename={'/prattle'}>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/login\">Login</Link>\n          </li>\n          <li>\n            <Link to=\"/chat\">Chat</Link>\n          </li>\n          <li>\n            <Link to=\"/groupchat\">Group Chat</Link>\n          </li>\n        </ul>\n\n        <hr />\n\n        {/*\n          A <Switch> looks through all its children <Route>\n          elements and renders the first one whose path\n          matches the current URL. Use a <Switch> any time\n          you have multiple routes, but you want only one\n          of them to render at a time\n        */}\n        <Switch>\n          <Route path=\"/login\">\n            <LoginPage />\n          </Route>\n          <Route path=\"/chat\">\n            <Chat />\n          </Route>\n          <Route path=\"/groupchat\">\n            <GroupChat />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { render } from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bulma/css/bulma.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}
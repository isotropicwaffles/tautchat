{"version":3,"sources":["UserServiceMessageProcessing.js","AddMessage.js","MessageItem.js","Messages.js","ToField.js","UserItem.js","Users.js","Messenger.js","ChatMessageProcessing.js","GeneralMessageRouter.js","WebSocket.js","LoginPage.js","components/layout/Header.js","components/pages/About.js","App.js","index.js"],"names":["userServiceContent","LOGIN","USER_CREATE","SEARCH_USERS_BY_NAME","FRIEND_USER","userServiveMessageRouter","message","contentType","content","includes","genericMessageResponses","SUCCESS","console","log","alert","FAILURE","processLoginResponse","processUserCreateResponse","AddMessage","state","onChange","e","setState","target","name","value","onSubmit","preventDefault","props","addMessage","this","style","display","type","placeholder","flex","padding","className","Component","MessageItem","getStyle","from","username","fontSize","textAlign","getNameStyle","getFontStyle","sentiment","sentTest","charAt","color","to","Messages","messages","map","filterMessages","messageWith","ToField","setTo","UserItem","user","Users","users","Messenger","groups","currentUser","newMessages1","filter","addToChatBox","newMessage","json","JSON","stringify","send","prevProps","queuedMessage","Fragment","contentTypes","ASCII","GROUP_MESSAGE","processDirectChatMessage","ws","messageTypes","USER_SERVICE","SESSION_SERVICE","GROUP_SERVICE","DIRECT_MESSAGE","BROADCAST_MESSAGE","generalMessageRouter","chatMessageRouter","connect","document","location","host","pathname","WebSocket","onopen","onclose","code","onerror","evt","data","onmessage","event","parse","LoginPage","handleChange","bind","handleLogin","handleCreate","handleSubmit","onClick","React","Header","About","App","active_socket","authenticated","setTimeout","basename","exact","path","render","routeProps","component","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.1a6f1d53.chunk.js","sourcesContent":["import {genericMessageResponses} from './GeneralMessageRouter';\r\nimport { withRouter } from 'react-router'\r\n\r\nvar status_label;\r\n\r\n/* Enumeration for message types service messages\r\n * \r\n */\r\n\r\nconst colors = {\r\n\t    RED:  '#d00',\r\n\t    GREEN: '#009d00'\r\n}\r\n \r\nconst userServiceContent = {\r\n\t\r\n\t  /**\r\n\t   * Represents Login Command\r\n\t   */\r\n\t   LOGIN: 'LOGIN',\r\n\t  /**\r\n\t   * Represents User Create Command\r\n\t   */\r\n\t   USER_CREATE: 'USER_CREATE',\r\n\t  /**\r\n\t   * Represents Search for User by Name Command \r\n\t   */\r\n\t   SEARCH_USERS_BY_NAME: 'SEARCH_USERS_BY_NAME',\r\n\t  /**\r\n\t   * Represents a Front User Command (TODO Hookup backend)\r\n\t   */\r\n\t   FRIEND_USER: 'FRIEND_USER',\r\n\t   \r\n}\r\n\r\n\r\n\r\n/* Routes received user service messages to correct logic\r\n * \r\n * @param json message - json of user service type message\r\n */\r\nfunction userServiveMessageRouter(message) {\r\n\t\r\n\t//  Check if it's a login response\r\n\tif (message.contentType == userServiceContent.LOGIN) {\r\n\t\tprocessLoginResponse(message);\r\n\t}\r\n\t\r\n\t//  Check if it's a create user response\r\n\tif (message.contentType == userServiceContent.USER_CREATE) {\r\n\t\t//  process chat message\r\n\t\tprocessUserCreateResponse(message);\r\n\t}\r\n\t\r\n\t//  Check if it's a create user response\r\n\tif (message.contentType == userServiceContent.SEARCH_USERS_BY_NAME) {\r\n\t\t//  process chat message\r\n\t\tprocessUserSearchResponse(message);\r\n\t}\r\n\r\n}\r\n\r\n\r\n//TODO Chad add your Swap this for your GUI references\r\n\r\n/* Process server response for user login\r\n*\r\n* @param json message - json of user service type message of login response\r\n*/\r\nfunction processLoginResponse(message){\r\n\tif (message.content.includes(genericMessageResponses.SUCCESS)){\r\n\t\tconsole.log(\"SUCCESS: User successfully logged into session.\");\r\n\t\talert(\"User successfully logged into session.\");\r\n\t\t// If unsuccessful this should run\r\n\t\t// status_label.style.color = colors.GREEN;\r\n\t    // status_label.innerHTML =  \"SUCCESS: User successfully logged into session.\";\t\r\n\t}else if (message.content.includes(genericMessageResponses.FAILURE)){\r\n\t\tconsole.log(\"ERROR: User Name Does not Exist. Please Create User First.\");\r\n\t\talert(\"User Name Does not Exist. Please Create User First.\");\r\n\t\t// If unsuccessful this should run\r\n\t\t// status_label.style.color = colors.RED;\r\n\t    // status_label.innerHTML =  \"ERROR: User Name Does not Exist. Please Create User First.\";\t\r\n\t}\r\n}\r\n\r\n//TODO Chad add your Swap this for your GUI references\r\n\r\n/*Process server response for user creation\r\n * \r\n* @param json message - json of user service type message of create user response\r\n */\r\nfunction processUserCreateResponse(message){\r\n\tif (message.content.includes(genericMessageResponses.SUCCESS)){\r\n\t\tconsole.log(\"User Successfully Created!\");   \r\n\t\talert(\"User Successfully Created!\"); \r\n\t\t//If successful this should run\r\n\t\t// status_label.style.color = colors.GREEN;\r\n\t\t// status_label.innerHTML =  \"User Successfully Created!\";\r\n\t}else if (message.content.includes(genericMessageResponses.FAILURE)){\r\n\t\tconsole.log(\"ERROR: Could Not Create User Name. Please Try Another Name.\");\r\n\t\talert(\"This User Name is already taken. Please Try Another Name.\");\r\n\t    // If unsuccessful this should run\r\n\t\t// status_label.style.color = colors.RED;\r\n\t\t// status_label.innerHTML =  \"ERROR: Could Not Create User Name. Please Try Another Name.\";\t\r\n\t}\r\n}\r\n\r\n\r\n/*Process server response for user friending\r\n * \r\n* @param json message - json of user service type message of user friend\r\n */\r\nfunction processFriendUserResponse(message){\r\n\t\r\n\t//TODO Chad add your GUI logic here\r\n\r\n\tif (message.content.includes(genericMessageResponses.SUCCESS)){\r\n\r\n\t}else if (message.content.includes(genericMessageResponses.FAILURE)){\r\n\r\n\t}\r\n}\r\n\r\n/*Process server response for searching for user names\r\n * \r\n* @param json message - json of user service type message of username search message\r\n */\r\nfunction processUserSearchResponse(message){\r\n\t//TODO Chad add your GUI logic here\r\n}\r\n\r\n\r\nexport {userServiveMessageRouter, userServiceContent};","import React, { Component } from 'react'\r\n\r\nexport class AddMessage extends Component {\r\n    state = {\r\n        content: ''\r\n    }\r\n\r\n    onChange = (e) => this.setState({[e.target.name]: e.target.value});\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addMessage(this.state.content);\r\n        this.setState({content:''})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit} style = {{display: 'flex'}}>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"content\"\r\n                    placeholder=\"Type Message Here\"\r\n                    style={{flex: '10', padding: '5px'}}\r\n                    value={this.state.content}\r\n                    onChange={this.onChange}\r\n                />\r\n                <input\r\n                    type=\"submit\"\r\n                    value=\"Submit\"\r\n                    className=\"btn\"\r\n                    style = {{flex: '1'}}\r\n                />\r\n            </form>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddMessage","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class MessageItem extends Component {\r\n    getStyle = (from) => {\r\n        if (this.props.username === from) {\r\n            return {\r\n                fontSize: '20px',\r\n                textAlign: 'right',\r\n                padding: '10px',\r\n            }\r\n        }\r\n        else {\r\n            return {\r\n                fontSize: '20px',\r\n                textAlign: 'left',\r\n                padding: '10px',\r\n            }\r\n        }\r\n    }\r\n\r\n    getNameStyle = (from) => {\r\n        return {\r\n            fontSize: '14px',\r\n            padding: '1px',\r\n        }\r\n    }\r\n\r\n    getFontStyle = (sentiment) => {\r\n        var sentTest = sentiment.charAt(0);\r\n        console.log(sentTest)\r\n\r\n\r\n        switch (sentTest) {\r\n\r\n            case \"0\":\r\n                return {\r\n                    color: '#FF0000'\r\n                }\r\n\r\n            case \"1\":\r\n                return {\r\n                    color: '#696969'\r\n                }\r\n\r\n            case \"2\":\r\n                return {\r\n                    color: '#7CFC00'\r\n                }\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const { from, to, content, sentiment } = this.props.message;\r\n        console.log(sentiment)\r\n\r\n        return (\r\n            <div style={this.getStyle(from)}>\r\n                <p style={this.getNameStyle()}>\r\n                    {from}\r\n                </p>\r\n                <p style={this.getFontStyle(sentiment)}>\r\n                    {content}\r\n                </p>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nMessageItem.propTypes = {\r\n    message: PropTypes.object.isRequired\r\n}\r\n\r\nexport default MessageItem","import React, { Component } from 'react';\r\nimport MessageItem from './MessageItem'\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios'\r\nimport uuid from 'uuid'\r\n\r\nclass Messages extends Component {\r\n    render() {\r\n        return this.props.messages.map((message) => (\r\n            <MessageItem message={message} filterMessages={this.filterMessages} username={this.props.username} messageWith={this.props.messageWith}/>\r\n        ));\r\n    }\r\n}\r\n\r\nMessages.propTypes = {\r\n    messages: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Messages;","import React, { Component } from 'react'\r\n\r\nexport class ToField extends Component {\r\n\r\n    state = {\r\n        messageWith: ''\r\n    }\r\n\r\n    onChange = (e) => {\r\n\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        }, () => {\r\n            this.props.setTo(this.state.messageWith);\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form style={{ display: 'flex' }}>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"messageWith\"\r\n                    placeholder=\"Who To Message\"\r\n                    style={{ flex: '10', padding: '5px' }}\r\n                    value={this.state.messageWith}\r\n                    onChange={this.onChange}\r\n                />\r\n            </form>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToField","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class UserItem extends Component {\r\n    render() {\r\n\r\n        const { from } = this.props.user;\r\n\r\n        return (\r\n            <div>\r\n                <p>\r\n                    {from}\r\n                </p>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nUserItem.propTypes = {\r\n    user: PropTypes.object.isRequired\r\n}\r\n\r\nexport default UserItem","import React, { Component } from 'react';\r\nimport UserItem from './UserItem'\r\nimport PropTypes from 'prop-types';\r\nimport {Link} from 'react-router-dom'\r\n\r\nclass Users extends Component {\r\n    render() {\r\n        // return (this.props.users.map((user) => (\r\n        //         <li key={user}>\r\n        //           <Link to=\"/\">Click</Link>\r\n        //         </li>\r\n        //       )\r\n        // )\r\n\r\n        \r\n        return this.props.users.map((user) => (\r\n            <UserItem user={user} username={this.props.username}/>\r\n        ));\r\n    }\r\n}\r\n\r\nUsers.propTypes = {\r\n    users: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Users;","import React, { Component } from 'react';\r\nimport AddMessage from './AddMessage';\r\nimport Messages from './Messages';\r\nimport ToField from './ToField';\r\nimport Users from './Users';\r\n\r\nclass Messenger extends Component {\r\n\r\n    state = {\r\n        messageWith: '',\r\n        messages: [],\r\n        users: [],\r\n        groups: []\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        // Typical usage (don't forget to compare props):\r\n        if (this.props.queuedMessage !== prevProps.queuedMessage) {\r\n            this.addToChatBox(this.props.queuedMessage)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.props.username)\r\n    }\r\n\r\n    filterMessages = () => {\r\n        const messageWith = this.state.messageWith\r\n        const currentUser = this.props.username\r\n        console.log(\"Starting filtered messages\")\r\n        console.log(this.state.messages)\r\n        const newMessages = this.state.messages.filter(messages =>\r\n            ((messages.from === currentUser) || (messages.from === messageWith)));\r\n        const newMessages1 = newMessages.filter(messages =>\r\n            ((messages.to === currentUser) || (messages.to === messageWith)));\r\n        console.log(newMessages1);\r\n        this.setState({ messages: newMessages1 });\r\n    };\r\n\r\n    addToChatBox = (newMessage) => {\r\n        this.setState({\r\n            messages: [...this.state.messages, newMessage]\r\n        }, () => {\r\n            this.filterMessages();\r\n        });\r\n    }\r\n\r\n\r\n    setTo = (to) => {\r\n        this.setState({ messageWith: to })\r\n    }\r\n\r\n    //Add Item\r\n    addMessage = (content) => {\r\n        var json = JSON.stringify({\r\n            \"type\": \"BROADCAST_MESSAGE\",\r\n            \"from\": this.props.username,\r\n            \"to\": this.state.messageWith,\r\n            \"contentType\": \"ASCII\",\r\n            \"content\": content\r\n        });\r\n\r\n        console.log(json);\r\n        this.props.send(json);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Users users={this.state.users} />\r\n                <ToField setTo={this.setTo} />\r\n                <Messages messages={this.state.messages} username={this.props.username} messageWith={this.state.messageWith} />\r\n                <AddMessage addMessage={this.addMessage} />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Messenger;","import { messageTypes } from \"./GeneralMessageRouter\";\r\nimport Messenger from './Messenger';\r\n\r\n/* Enumeration for non-service message content types\r\n * \r\n */\r\nconst contentTypes = {\r\n\t/**\r\n\t* Represents Standard ASCII Text content\r\n\t*/\r\n\tASCII: 'ASCII',\r\n\r\n\t/**\r\n\t* Represents GROUP_MESSAGE ASCII content\r\n\t*/\r\n\tGROUP_MESSAGE: 'GROUP_MESSAGE',\r\n\t\r\n}\r\n\r\n/* Routes received user service messages to correct logic\r\n * \r\n * @param json message - json of user service type message\r\n */\r\nfunction chatMessageRouter(message) {\r\n\t//  Process Broadcast\r\n\tif (message.type == messageTypes.BROADCAST_MESSAGE) {\r\n\t\tprocessDirectChatMessage(message);\r\n\t} else if (message.type == messageTypes.DIRECT_MESSAGE) {\r\n\t\tif (message.contentType == contentTypes.GROUP_MESSAGE){\r\n\t\t\tprocessGroupMessage(message);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tprocessDirectChatMessage(message);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/* Processes recieved direct message chat\r\n * \r\n * @param json message - json of chat type message\r\n */\r\nfunction processDirectChatMessage(message) {\r\n\tconsole.log(\"I got something to use\");\r\n\tconsole.log(message);\r\n}\r\n\r\n/* Processes recieved broadcast message chat\r\n * \r\n * @param json message - json of chat type message\r\n */\r\nfunction processBroadcastChatMessage(message) {\r\n\t//TODO Chad put in GUI logic\r\n\r\n}\r\n\r\n\r\n\r\n/* Processes recieved group message chat\r\n * \r\n * @param json message - json of chat type message\r\n */\r\nfunction processGroupMessage(message) {\r\n\t//TODO Chad put in GUI logic\r\n}\r\n\r\n\r\n// TODO Chad, you can use these colors or do something else\r\n// I was just putting them here as an example\r\n\r\n/* Enumeration colors to use for sentiment\r\n * \r\n */\r\nconst sentimentColors = {\r\n    NEGATIVE:  '#d00', //Red\r\n    NEUTRAL: '\t#383838', //Dark Gray\r\n    POSITIVE: '#009d00' //Green\r\n}\r\n\r\n\r\n/* Enumeration representing positive, negative, and neutral sentiments\r\n* \r\n*/\r\nconst sentiment = {\r\n    NEGATIVE:  '0', \r\n    NEUTRAL: '1',\t \r\n    POSITIVE: '2' \r\n}\r\n\r\n//TODO Chad, I'm not sure how you'll want to display the sentiment information\r\n// in the GUI. Below is just an example of a template you can use to iterate through\r\n// The sentiments of the content.\r\n// The message.content should be the same size as the message.sentiment\r\n// Each character of the content has a sentiment value associated with it, either 0,1, or 2 (see the sentiment enumeration above)\r\n\r\n\r\n/* Template function that shows how content and sentiment are associate\r\n * Feel free to update this to something with useful functionality\r\n *  \r\n * @param json message - json of chat type message\r\n */\r\nfunction processSentimentContent(message){\r\n\t\r\n\t\r\n\tfor (var i = 0; i < message.content.length; i++) {\r\n\t\t  \r\n\t\tswitch(message.sentiment.charAt(i)){\r\n\t\t\t\r\n\t\t\tcase sentiment.NEGATIVE:\r\n\t\t\t\t//TODO chad feel free to add logic\r\n\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\tcase sentiment.POSITIVE:\r\n\t\t\t\t//TODO chad feel free to add logic\r\n\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\tcase sentiment.NEUTRAL:\r\n\t\t\t\t//TODO chad feel free to add logic\r\n\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n\r\nexport {contentTypes, chatMessageRouter}","\r\nimport { userServiveMessageRouter } from './UserServiceMessageProcessing'\r\nimport {chatMessageRouter} from './ChatMessageProcessing'\r\n\r\n/* Enumeration for message types service messages\r\n * \r\n */\r\nconst messageTypes = {\r\n\r\n\tUSER_SERVICE: 'USER_SERVICE',\r\n\t/**\r\n\t* Represents Session Service Address\r\n\t*/\r\n\tSESSION_SERVICE: 'SESSION_SERVICE',\r\n\t/**\r\n\t* Represents Group Service Address\r\n\t*/\r\n\tGROUP_SERVICE: 'GROUP_SERVICE',\r\n\t/**\r\n\t* Represents group message address\r\n\t*/\r\n\tGROUP_MESSAGE: 'GROUP_MESSAGE',\r\n    /**\r\n\t* Represents a direct message address\r\n\t*/\r\n\tDIRECT_MESSAGE: 'DIRECT_MESSAGE',\r\n    /**\r\n\t* Represents a broadcast message address\r\n\t*/\r\n\tBROADCAST_MESSAGE: 'BROADCAST_MESSAGE',\r\n\r\n}\r\n\r\n\r\n\r\nconst genericMessageResponses = {\r\n\t/**\r\n\t* Represents a Success message\r\n\t*/\r\n\tSUCCESS: 'SUCCESS',\r\n\t/**\r\n\t* Represents a Failure message\r\n\t*/\r\n\tFAILURE: 'FAILURE',\r\n\r\n}\r\n\r\n\r\n/* Routes received messages to correct logic\r\n * \r\n * @param json message - json of message\r\n */\r\nfunction generalMessageRouter(message) {\r\n\tconsole.log(\"General message router\")\r\n\tconsole.log(message);\r\n\tif (message.type == messageTypes.BROADCAST_MESSAGE) {\r\n\t\t// process chat message\r\n\t\tconsole.log(\"I'm going to go process this broadcast\")\r\n\t\tchatMessageRouter(message);\r\n\t}\r\n\tif (message.from == messageTypes.USER_SERVICE) {\r\n\t\t//  process user server message\r\n\t\tuserServiveMessageRouter(message);\r\n\t}\r\n}\r\n\r\n\r\nexport { generalMessageRouter, messageTypes, genericMessageResponses };","import { generalMessageRouter } from './GeneralMessageRouter'\r\nimport { sendLoginMessage, sendCreateUserMessage } from './UserServiceMessages'\r\n\r\nvar ws;\r\nvar username;\r\nvar active_socket = false;\r\n/* Enumeration for colors\r\n * \r\n */\r\n\r\n/* Connects to the server and sets up call back for messaging events\r\n * \r\n */\r\nfunction connect() {\r\n\tconsole.log('Checking Socket Connection');\r\n\r\n\tif (typeof ws === 'undefined') {\r\n\r\n\t\tconsole.log('Connecting to Socket');\r\n\r\n\t\tvar host = document.location.host;\r\n\t\tvar pathname = document.location.pathname;\r\n\r\n\t\t//Hard coded for testing purposes\r\n\t\tws = new WebSocket(\"ws://localhost:8080/prattle/chat/\");\r\n\t\t// ws = new WebSocket(\"ws://\" +host  + pathname + \"chat/\");\r\n\r\n\t\tws.onopen = function () {\r\n\t\t\tconsole.log('Connection open!');\r\n\t\t\tactive_socket = true;\r\n\t\t}\r\n\r\n\t\tws.onclose = function (code) {\r\n\t\t\tconsole.log(\"websocket closing. Code:\", code);\r\n\t\t\tactive_socket = false;\r\n\t\t}\r\n\r\n\t\tws.onerror = function (evt) {\r\n\t\t\tconsole.log(\"Websocket Error\");\r\n\t\t\tconsole.log(\"Error Code: \", evt.data);\r\n\t\t}\r\n\t\tws.onmessage = function (event) {\r\n\t\t\tconsole.log('Received Message');\r\n\t\t\tconsole.log(event.data);\r\n\t\t\tgeneralMessageRouter(JSON.parse(event.data));\r\n\r\n\t\t};\r\n\t}\r\n}\r\n\r\n/* Sends a message to the server\r\n*\r\n*/\r\nfunction send(message) {\r\n\t//If the server is already open then sent the message\r\n\tif (active_socket) {\r\n\t\tws.send(message)\r\n\t} else {\r\n\t\t//if server is not connected, then connect first\r\n\t\tconnect();\r\n\t\tsetTimeout(function () { ws.send(message); }, 500);\r\n\t}\r\n}\r\n\r\nexport { send, connect };","import React from 'react';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport './App.css';\r\nimport { generalMessageRouter } from './GeneralMessageRouter'\r\nimport { sendLoginMessage, sendCreateUserMessage } from './UserServiceMessages'\r\n\r\nclass LoginPage extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { value: '' };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n        this.handleCreate = this.handleCreate.bind(this);\r\n\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    handleLogin(event) {\r\n        event.preventDefault();\r\n        //Send user creation request\r\n        var json = JSON.stringify({\r\n            \"type\": \"USER_SERVICE\",\r\n            \"contentType\": \"LOGIN\",\r\n            \"content\": this.state.value\r\n        });\r\n\r\n        console.log(\"Logging in as %s\", this.state.value)\r\n\r\n        this.props.send(json);\r\n    }\r\n\r\n    handleCreate(event) {\r\n        event.preventDefault();\r\n\r\n        var json = JSON.stringify({\r\n            \"type\": \"USER_SERVICE\",\r\n            \"contentType\": \"USER_CREATE\",\r\n            \"content\": this.state.value\r\n        });\r\n\r\n        console.log(\"Creating new user: %s\", this.state.value)\r\n        this.props.send(json);\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return this.props.username !==  null ? (\r\n            <Redirect to=\"/chat\" />\r\n        ) : (\r\n                <div className=\"section is-fullheight\">\r\n                    <div className=\"container\">\r\n                        <div className=\"column is-4 is-offset-4\">\r\n                            <div className=\"box\">\r\n                                <form onSubmit={this.handleSubmit}>\r\n                                    <div className=\"field\">\r\n                                        <label className=\"label\">User Name</label>\r\n                                        <div className=\"control\">\r\n                                            <input className=\"input\" type=\"text\" name=\"username\" onChange={this.handleChange} />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"buttons is-grouped\">\r\n                                        <button type=\"button\" className=\"button is-block is-info is-fullwidth\" onClick={this.handleLogin}>Login</button>\r\n                                        <button type=\"button\" className=\"button is-block is-info is-fullwidth\" onClick={this.handleCreate}>Create</button>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default LoginPage;","import {Link} from 'react-router-dom'\r\nimport React, { Component } from 'react'\r\n\r\nexport class Header extends Component {\r\n\r\n    state = {\r\n        display: 'TautChat'\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        // Typical usage (don't forget to compare props):\r\n        if (this.props.username !== prevProps.username) {\r\n            var display = \"Hi, \" + this.props.username + \"!\"\r\n            this.setState({display:display})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            \r\n            <header>\r\n\r\n\r\n\r\n                <h1>{this.state.display}</h1>\r\n                <Link to=\"/\">Home</Link> | {' '}\r\n                <Link to=\"/about\">About</Link> | {' '}\r\n                <Link to=\"/chat\">Chat</Link> | {' '}\r\n                <Link to=\"/groupchat\">GroupChat</Link>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>About</h1>\r\n            <p>This is a to do list app v0.0.1</p>\r\n        </React.Fragment>\r\n    )\r\n}","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,useHistory \n} from \"react-router-dom\";\nimport './App.css';\nimport LoginPage from './LoginPage';\nimport Header from './components/layout/Header';\nimport About from './components/pages/About';\nimport Messenger from './Messenger';\nimport { connect, send } from './WebSocket'\n\nclass App extends Component {\n  state = {\n    ws: '',\n    username: null,\n    active_socket: false,\n    authenticated: true,\n    queuedMessage: ''\n  }\n\n  componentDidMount() {\n    this.connect();\n  }\n\n  connect = () => {\n    var ws = this.state.ws\n    var active_socket = this.state.active_socket\n    console.log('Checking Socket Connection');\n\n    if (this.state.ws === '') {\n\n      console.log('Connecting to Socket');\n\n      var host = document.location.host;\n      var pathname = document.location.pathname;\n\n      ws = new WebSocket(\"ws://localhost:8080/prattle/chat/\");\n      // ws = new WebSocket(\"ws://\" +host  + pathname + \"chat/\");\n      this.setState({ ws })\n\n      ws.onopen = () => {\n        console.log('Connection open!');\n        this.setState({ active_socket: true })\n      }\n\n      ws.onclose = (code) => {\n        console.log(\"websocket closing. Code:\", code);\n        this.setState({ active_socket: false })\n        this.setState({ ws: '' })\n      }\n\n      ws.onerror = (evt) => {\n        console.log(\"Websocket Error\");\n        console.log(\"Error Code: \", evt.data);\n      }\n      ws.onmessage = (event) => {\n        console.log('Received Message');\n        console.log(event.data);\n        this.generalMessageRouter(JSON.parse(event.data));\n      };\n    }\n  }\n\n  send = (message) => {\n    var ws = this.state.ws\n    var active_socket = this.state.active_socket\n\n    if (active_socket) {\n      ws.send(message)\n    } else {\n      connect();\n      setTimeout(function () { ws.send(message); }, 500);\n    }\n  }\n\n  generalMessageRouter = (message) => {\n    console.log(\"General message router\")\n    console.log(message);\n    if (message.type == \"BROADCAST_MESSAGE\") {\n      console.log(\"I'm going to go process this broadcast\")\n      this.chatMessageRouter(message);\n    }\n    if (message.from == \"USER_SERVICE\") {\n      this.userServiveMessageRouter(message);\n    }\n  }\n\n  chatMessageRouter = (message) => {\n    //  Process Broadcast\n    if (message.type == \"BROADCAST_MESSAGE\") {\n      this.processDirectChatMessage(message);\n    }\n    else if (message.type == \"DIRECT_MESSAGE\") {\n      this.processDirectChatMessage(message);\n    }\n  }\n\n  processDirectChatMessage(message) {\n    console.log(\"I got something to use\");\n    console.log(message);\n    this.setState({queuedMessage: message})\n\n  }\n\n  userServiveMessageRouter(message) {\n    if (message.contentType == \"LOGIN\") {\n      this.processLoginResponse(message);\n    }\n    if (message.contentType == \"USER_CREATE\") {\n      this.processUserCreateResponse(message);\n    }\n  }\n\n  processLoginResponse(message) {\n    if (message.content.includes(\"SUCCESS\")) {\n      this.setState({username: message.to})\n      console.log(message)\n      console.log(\"SUCCESS: User successfully logged into session.\");\n      this.setState({authenticated: true});\n    } else if (message.content.includes(\"FAILURE\")) {\n      console.log(\"ERROR: User Name Does not Exist. Please Create User First.\");\n    }\n  }\n\n  processUserCreateResponse(message) {\n    if (message.content.includes(\"SUCCESS\")) {\n      alert(\"User successfully created. Please log in to continue\")\n      console.log(\"User Successfully Created!\");\n    }\n    else if (message.content.includes(\"FAILURE\")) {\n      console.log(\"ERROR: Could Not Create User Name. Please Try Another Name.\");\n    }\n  }\n\n\n  render() {\n    return (\n\n      <Router basename=\"prattle\">\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header username={this.state.username}/>\n            <Route exact path=\"/\" render={(routeProps) => (<LoginPage {...routeProps} connect={this.connect} send={this.send} username={this.state.username}/>)} />\n            <Route path=\"/about\" component={About} />\n            <Route path=\"/chat/:messageWith?\" render={(routeProps) => (<Messenger {...routeProps} connect={this.connect} send={this.send} username={this.state.username} queuedMessage={this.state.queuedMessage}/>)} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bulma/css/bulma.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}
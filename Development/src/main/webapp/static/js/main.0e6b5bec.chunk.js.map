{"version":3,"sources":["components/messaging/UserServiceMessageProcessing.js","components/messaging/GeneralMessageRouter.js","components/messaging/WebSocket.js","components/LoginPage.js","components/messaging/UserServiceMessages.js","components/layout/Header.js","components/pages/About.js","components/MessageItem.js","components/AddMessage.js","components/Messages.js","components/messaging/ChatMessageProcessing.js","components/Messenger.js","components/messaging/ChatMessages.js","App.js","index.js"],"names":["userServiceContent","LOGIN","USER_CREATE","SEARCH_USERS_BY_NAME","FRIEND_USER","userServiveMessageRouter","message","contentType","content","includes","genericMessageResponses","SUCCESS","console","log","alert","FAILURE","processLoginResponse","processUserCreateResponse","ws","messageTypes","USER_SERVICE","SESSION_SERVICE","GROUP_SERVICE","GROUP_MESSAGE","DIRECT_MESSAGE","BROADCAST_MESSAGE","active_socket","connect","document","location","host","pathname","WebSocket","onopen","onclose","code","onerror","evt","data","onmessage","event","JSON","parse","from","send","setTimeout","LoginPage","props","state","value","handleChange","bind","handleLogin","handleCreate","this","setState","target","preventDefault","username","json","stringify","sendLoginMessage","className","onSubmit","handleSubmit","type","name","onChange","onClick","React","Component","Header","to","About","Fragment","MessageItem","getStyle","background","padding","borderBottom","style","AddMessage","e","addMessage","display","placeholder","flex","Messages","messages","map","filterMessages","contentTypes","ASCII","Messenger","currentUser","messageWith","newMessages1","filter","match","params","newMessage","key","uuid","v4","sendDirectMessage","loadPersistentMessages","axios","get","then","res","App","basename","exact","path","component","ReactDOM","render","getElementById"],"mappings":"gTAcMA,EAAqB,CAKvBC,MAAO,QAIPC,YAAa,cAIbC,qBAAsB,uBAItBC,YAAa,eAUjB,SAASC,EAAyBC,GAG7BA,EAAQC,aAAeP,EAAmBC,OAyB/C,SAA8BK,GACzBA,EAAQE,QAAQC,SAASC,EAAwBC,UACpDC,QAAQC,IAAI,mDACZC,MAAM,2CAIGR,EAAQE,QAAQC,SAASC,EAAwBK,WAC1DH,QAAQC,IAAI,8DACZC,MAAM,wDAjCNE,CAAqBV,GAIlBA,EAAQC,aAAeP,EAAmBE,aA0C/C,SAAmCI,GAC9BA,EAAQE,QAAQC,SAASC,EAAwBC,UACpDC,QAAQC,IAAI,8BACZC,MAAM,+BAIGR,EAAQE,QAAQC,SAASC,EAAwBK,WAC1DH,QAAQC,IAAI,+DACZC,MAAM,8DAjDNG,CAA0BX,GAIvBA,EAAQC,YAAeP,EAAmBG,qBCjD/C,ICHIe,EDGEC,EAAe,CAEpBC,aAAc,eAIXC,gBAAiB,kBAIjBC,cAAe,gBAIfC,cAAe,gBAIlBC,eAAgB,iBAIhBC,kBAAmB,qBAMdf,EAA0B,CAI9BC,QAAS,UAINI,QAAS,WCrCd,IAAIW,GAAgB,EAQpB,SAASC,IAGR,GAFAf,QAAQC,IAAI,8BAEM,qBAAPK,EAAoB,CAE9BN,QAAQC,IAAI,wBAEDe,SAASC,SAASC,KACdF,SAASC,SAASE,UAGjCb,EAAK,IAAIc,UAAU,sCAGhBC,OAAS,WACXrB,QAAQC,IAAI,oBACZa,GAAgB,GAGjBR,EAAGgB,QAAU,SAAUC,GACtBvB,QAAQC,IAAI,2BAA4BsB,GACxCT,GAAgB,GAGjBR,EAAGkB,QAAU,SAAUC,GACtBzB,QAAQC,IAAI,mBACZD,QAAQC,IAAI,eAAgBwB,EAAIC,OAEjCpB,EAAGqB,UAAY,SAAUC,GDU3B,IAA8BlC,ECT3BM,QAAQC,IAAI,oBACZD,QAAQC,IAAI2B,EAAMF,ODQShC,ECPNmC,KAAKC,MAAMF,EAAMF,ODS5B/B,YAAeY,EAAaM,kBAMpCnB,EAAQqC,MAAQxB,EAAaC,cAEhCf,EAAyBC,KCR3B,SAASsC,EAAKtC,GAEToB,EACHR,EAAG0B,KAAKtC,IAGRqB,IACAkB,YAAW,WAAc3B,EAAG0B,KAAKtC,KAAa,M,ICHjCwC,E,YAlDX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CAAEC,MAAO,IAEtB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBANL,E,0EAUNX,GACTc,KAAKC,SAAS,CAAEN,MAAOT,EAAMgB,OAAOP,U,kCAG5BT,GACRA,EAAMiB,iBCdd,SAA0BC,GAGtB,IAAIC,EAAOlB,KAAKmB,UAAU,CACzB,KAAQzC,EAAaC,aACxB,YAAepB,EAAmBC,MAC5B,QAAWyD,IAGf9C,QAAQC,IAAI8C,GACZf,EAAKe,GDKDE,CAAiBP,KAAKN,MAAMC,S,mCAGnBT,GCAjB,IAA+BkB,EDCvBlB,EAAMiB,iBCDiBC,EDEDJ,KAAKN,MAAMC,MCMtCL,EALYH,KAAKmB,UAAU,CACzB,KAAQzC,EAAaC,aACxB,YAAepB,EAAmBE,YAC5B,QAAWwD,O,+BDAX,OACI,yBAAKI,UAAU,yBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,2BACX,yBAAKA,UAAU,OACX,0BAAMC,SAAUT,KAAKU,cACjB,yBAAKF,UAAU,SACX,2BAAOA,UAAU,SAAjB,aACA,yBAAKA,UAAU,WACX,2BAAOA,UAAU,QAAQG,KAAK,OAAOC,KAAK,WAAWC,SAAUb,KAAKJ,iBAG5E,yBAAKY,UAAU,sBACX,4BAAQG,KAAK,SAASH,UAAU,uCAAuCM,QAASd,KAAKF,aAArF,SACA,4BAAQa,KAAK,SAASH,UAAU,uCAAuCM,QAASd,KAAKD,cAArF,oB,GAzCZgB,IAAMC,WEFf,SAASC,IACpB,OACI,gCACI,wCACA,kBAAC,IAAD,CAAMC,GAAG,KAAT,QAFJ,MAEgC,IAC5B,kBAAC,IAAD,CAAMA,GAAG,UAAT,SAHJ,MAGsC,IAClC,kBAAC,IAAD,CAAMA,GAAG,SAAT,QAJJ,MAIoC,IAChC,kBAAC,IAAD,CAAMA,GAAG,cAAT,cCRG,SAASC,IACpB,OACI,kBAAC,IAAMC,SAAP,KACI,qCACA,+D,YC4BGC,EA/Bf,2MACIC,SAAW,WACP,MAAO,CACHC,WAAY,UACZC,QAAS,OACTC,aAAc,oBAL1B,wEASc,IAAD,EAE0BzB,KAAKP,MAAMzC,QAAlCqC,EAFH,EAEGA,KAAM6B,EAFT,EAESA,GAAIhE,EAFb,EAEaA,QAElB,OACI,yBAAKwE,MAAO1B,KAAKsB,YACb,2BACKjC,EACA,KACA6B,EACA,KACAhE,QApBrB,GAAiC8D,a,0CCkClBW,EAnCf,2MACIjC,MAAQ,CACJxC,QAAS,IAFjB,EAKI2D,SAAW,SAACe,GAAD,OAAO,EAAK3B,SAAL,eAAgB2B,EAAE1B,OAAOU,KAAOgB,EAAE1B,OAAOP,SAL/D,EAOIc,SAAW,SAACmB,GACRA,EAAEzB,iBACF,EAAKV,MAAMoC,WAAW,EAAKnC,MAAMxC,UATzC,wEAaQ,OACI,0BAAMuD,SAAUT,KAAKS,SAAUiB,MAAS,CAACI,QAAS,SAC9C,2BACInB,KAAK,OACLC,KAAK,UACLmB,YAAY,oBACZL,MAAO,CAACM,KAAM,KAAMR,QAAS,OAC7B7B,MAAOK,KAAKN,MAAMxC,QAClB2D,SAAUb,KAAKa,WAEnB,2BACIF,KAAK,SACLhB,MAAM,SACNa,UAAU,MACVkB,MAAS,CAACM,KAAM,YA3BpC,GAAgChB,aCgBjBiB,E,iLAXD,IAAD,OACL,OAAOjC,KAAKP,MAAMyC,SAASC,KAAI,SAACnF,GAAD,OAC3B,kBAAC,EAAD,CAAaA,QAASA,EAASoF,eAAgB,EAAKA,wB,GAHzCpB,aCAjBqB,EAAe,CAIpBC,MAAO,QAKPrE,cAAe,iB,ICuDDsE,E,2MA1DX7C,MAAQ,CACJwC,SAAU,I,EAmBdE,eAAiB,SAACI,EAAaC,GAC3BnF,QAAQC,IAAI,EAAKmC,MAAMwC,UACvB,IAEMQ,EAFc,EAAKhD,MAAMwC,SAASS,QAAO,SAAAT,GAAQ,OACjDA,EAAS7C,OAASmD,GAAiBN,EAAS7C,OAASoD,KAC1BE,QAAO,SAAAT,GAAQ,OAC1CA,EAAShB,KAAOsB,GAAiBN,EAAShB,KAAOuB,KACvDnF,QAAQC,IAAImF,GACZ,EAAKzC,SAAS,CAAEiC,SAAUQ,K,EAK9Bb,WAAa,SAAC3E,GAAa,IAAD,EACe,EAAKuC,MAAMmD,MAAMC,OAEhDC,EAAa,CACf5F,UACAD,YAAa,iBACboC,KANkB,EACdmD,YAMJtB,GAPkB,EACDuB,YAOjBM,IAAKC,IAAKC,MAGd,EAAKhD,SAAS,CAAEiC,SAAS,GAAD,mBAAM,EAAKxC,MAAMwC,UAAjB,CAA2BY,MC3B3D,SAA2B9F,GAGvB,IAAIqD,EAAOlB,KAAKmB,UAAU,CACzB,KAAQzC,EAAaK,eAClB,KAAQlB,EAAQqC,KAChB,GAAQrC,EAAQkE,GAChB,YAAemB,EAAaC,MAC5B,QAAWtF,EAAQE,UAGvBI,QAAQC,IAAI8C,GACZf,EAAKe,GDiBD6C,CAAkBJ,I,mFAxClB9C,KAAKmD,2B,+CAGiB,IAAD,SACgBnD,KAAKP,MAAMmD,MAAMC,OAA9CL,EADa,EACbA,YAAaC,EADA,EACAA,YACrBnF,QAAQC,IAAI,sBAAuBiF,GACnClF,QAAQC,IAAI,wBAAyBkF,GAErCW,IAAMC,IAAI,wBACLC,MAAK,SAAAC,GAAG,OAAI,EAAKtD,SAAS,CAAEiC,SAAUqB,EAAIvE,OAAQ,WAC/C1B,QAAQC,IAAIyC,KAAKN,OACjBM,KAAKoC,eAAeI,EAAaC,W,+BAiCzC,OACI,kBAAC,IAAMrB,SAAP,KACI,kBAAC,EAAD,CAAUc,SAAUlC,KAAKN,MAAMwC,WAC/B,kBAAC,EAAD,CAAYL,WAAY7B,KAAK6B,kB,GAtDrBb,aEoBTwC,E,iLAhBX,OACE,kBAAC,IAAD,CAAQC,SAAS,WACf,yBAAKjD,UAAU,OACb,yBAAKA,UAAU,aACb,kBAACS,EAAD,MACA,kBAAC,IAAD,CAAOyC,OAAK,EAACC,KAAK,IAAIC,UAAWpE,IACjC,kBAAC,IAAD,CAAOmE,KAAK,SAASC,UAAWzC,IAChC,kBAAC,IAAD,CAAOwC,KAAK,oCAAoCC,UAAWrB,W,GAVrDvB,a,MCLlB6C,IAASC,OAAO,kBAAC,EAAD,MAASxF,SAASyF,eAAe,W","file":"static/js/main.0e6b5bec.chunk.js","sourcesContent":["import {genericMessageResponses} from './GeneralMessageRouter';\r\nimport { withRouter } from 'react-router'\r\n\r\nvar status_label;\r\n\r\n/* Enumeration for message types service messages\r\n * \r\n */\r\n\r\nconst colors = {\r\n\t    RED:  '#d00',\r\n\t    GREEN: '#009d00'\r\n}\r\n \r\nconst userServiceContent = {\r\n\t\r\n\t  /**\r\n\t   * Represents Login Command\r\n\t   */\r\n\t   LOGIN: 'LOGIN',\r\n\t  /**\r\n\t   * Represents User Create Command\r\n\t   */\r\n\t   USER_CREATE: 'USER_CREATE',\r\n\t  /**\r\n\t   * Represents Search for User by Name Command \r\n\t   */\r\n\t   SEARCH_USERS_BY_NAME: 'SEARCH_USERS_BY_NAME',\r\n\t  /**\r\n\t   * Represents a Front User Command (TODO Hookup backend)\r\n\t   */\r\n\t   FRIEND_USER: 'FRIEND_USER',\r\n\t   \r\n}\r\n\r\n\r\n\r\n/* Routes received user service messages to correct logic\r\n * \r\n * @param json message - json of user service type message\r\n */\r\nfunction userServiveMessageRouter(message) {\r\n\t\r\n\t//  Check if it's a login response\r\n\tif (message.contentType == userServiceContent.LOGIN) {\r\n\t\tprocessLoginResponse(message);\r\n\t}\r\n\t\r\n\t//  Check if it's a create user response\r\n\tif (message.contentType == userServiceContent.USER_CREATE) {\r\n\t\t//  process chat message\r\n\t\tprocessUserCreateResponse(message);\r\n\t}\r\n\t\r\n\t//  Check if it's a create user response\r\n\tif (message.contentType == userServiceContent.SEARCH_USERS_BY_NAME) {\r\n\t\t//  process chat message\r\n\t\tprocessUserSearchResponse(message);\r\n\t}\r\n\r\n}\r\n\r\n\r\n//TODO Chad add your Swap this for your GUI references\r\n\r\n/* Process server response for user login\r\n*\r\n* @param json message - json of user service type message of login response\r\n*/\r\nfunction processLoginResponse(message){\r\n\tif (message.content.includes(genericMessageResponses.SUCCESS)){\r\n\t\tconsole.log(\"SUCCESS: User successfully logged into session.\");\r\n\t\talert(\"User successfully logged into session.\");\r\n\t\t// If unsuccessful this should run\r\n\t\t// status_label.style.color = colors.GREEN;\r\n\t    // status_label.innerHTML =  \"SUCCESS: User successfully logged into session.\";\t\r\n\t}else if (message.content.includes(genericMessageResponses.FAILURE)){\r\n\t\tconsole.log(\"ERROR: User Name Does not Exist. Please Create User First.\");\r\n\t\talert(\"User Name Does not Exist. Please Create User First.\");\r\n\t\t// If unsuccessful this should run\r\n\t\t// status_label.style.color = colors.RED;\r\n\t    // status_label.innerHTML =  \"ERROR: User Name Does not Exist. Please Create User First.\";\t\r\n\t}\r\n}\r\n\r\n//TODO Chad add your Swap this for your GUI references\r\n\r\n/*Process server response for user creation\r\n * \r\n* @param json message - json of user service type message of create user response\r\n */\r\nfunction processUserCreateResponse(message){\r\n\tif (message.content.includes(genericMessageResponses.SUCCESS)){\r\n\t\tconsole.log(\"User Successfully Created!\");   \r\n\t\talert(\"User Successfully Created!\"); \r\n\t\t//If successful this should run\r\n\t\t// status_label.style.color = colors.GREEN;\r\n\t\t// status_label.innerHTML =  \"User Successfully Created!\";\r\n\t}else if (message.content.includes(genericMessageResponses.FAILURE)){\r\n\t\tconsole.log(\"ERROR: Could Not Create User Name. Please Try Another Name.\");\r\n\t\talert(\"This User Name is already taken. Please Try Another Name.\");\r\n\t    // If unsuccessful this should run\r\n\t\t// status_label.style.color = colors.RED;\r\n\t\t// status_label.innerHTML =  \"ERROR: Could Not Create User Name. Please Try Another Name.\";\t\r\n\t}\r\n}\r\n\r\n\r\n/*Process server response for user friending\r\n * \r\n* @param json message - json of user service type message of user friend\r\n */\r\nfunction processFriendUserResponse(message){\r\n\t\r\n\t//TODO Chad add your GUI logic here\r\n\r\n\tif (message.content.includes(genericMessageResponses.SUCCESS)){\r\n\r\n\t}else if (message.content.includes(genericMessageResponses.FAILURE)){\r\n\r\n\t}\r\n}\r\n\r\n/*Process server response for searching for user names\r\n * \r\n* @param json message - json of user service type message of username search message\r\n */\r\nfunction processUserSearchResponse(message){\r\n\t//TODO Chad add your GUI logic here\r\n}\r\n\r\n\r\nexport {userServiveMessageRouter, userServiceContent};","\r\nimport {userServiveMessageRouter} from './UserServiceMessageProcessing'\r\n\r\n/* Enumeration for message types service messages\r\n * \r\n */\r\nconst messageTypes = {\r\n\t\r\n\tUSER_SERVICE: 'USER_SERVICE',\r\n\t/**\r\n\t* Represents Session Service Address\r\n\t*/\r\n    SESSION_SERVICE: 'SESSION_SERVICE',\r\n\t/**\r\n\t* Represents Group Service Address\r\n\t*/\r\n    GROUP_SERVICE: 'GROUP_SERVICE',\r\n\t/**\r\n\t* Represents group message address\r\n\t*/\r\n    GROUP_MESSAGE: 'GROUP_MESSAGE',\r\n    /**\r\n\t* Represents a direct message address\r\n\t*/\r\n\tDIRECT_MESSAGE: 'DIRECT_MESSAGE',\r\n    /**\r\n\t* Represents a broadcast message address\r\n\t*/\r\n\tBROADCAST_MESSAGE: 'BROADCAST_MESSAGE',\r\n\r\n}\r\n\r\n\r\n\r\nconst genericMessageResponses = {\r\n\t\t/**\r\n\t\t* Represents a Success message\r\n\t\t*/\r\n\t\tSUCCESS: 'SUCCESS',\r\n\t\t/**\r\n\t\t* Represents a Failure message\r\n\t\t*/\r\n\t    FAILURE: 'FAILURE',\r\n\r\n\t}\r\n\r\n\r\n/* Routes received messages to correct logic\r\n * \r\n * @param json message - json of message\r\n */\r\nfunction generalMessageRouter(message) {\r\n\t\r\n\tif (message.contentType == messageTypes.BROADCAST_MESSAGE) {\r\n\t// process chat message\r\n\t// processChatMessage(message);\r\n\t}\r\n\t\r\n\t\r\n\tif (message.from == messageTypes.USER_SERVICE) {\r\n\t\t//  process user server message\r\n\t\tuserServiveMessageRouter(message);\r\n\t}\r\n\t\r\n}\r\n\r\n\r\nexport {generalMessageRouter, messageTypes, genericMessageResponses};","import { generalMessageRouter } from './GeneralMessageRouter'\r\nimport { sendLoginMessage, sendCreateUserMessage } from './UserServiceMessages'\r\n\r\nvar ws;\r\nvar username;\r\nvar active_socket = false;\r\n/* Enumeration for colors\r\n * \r\n */\r\n\r\n/* Connects to the server and sets up call back for messaging events\r\n * \r\n */\r\nfunction connect() {\r\n\tconsole.log('Checking Socket Connection');\r\n\r\n\tif (typeof ws === 'undefined') {\r\n\r\n\t\tconsole.log('Connecting to Socket');\r\n\r\n\t\tvar host = document.location.host;\r\n\t\tvar pathname = document.location.pathname;\r\n\r\n\t\t//Hard coded for testing purposes\r\n\t\tws = new WebSocket(\"ws://localhost:8080/prattle/chat/\");\r\n\t\t// ws = new WebSocket(\"ws://\" +host  + pathname + \"chat/\");\r\n\r\n\t\tws.onopen = function () {\r\n\t\t\tconsole.log('Connection open!');\r\n\t\t\tactive_socket = true;\r\n\t\t}\r\n\r\n\t\tws.onclose = function (code) {\r\n\t\t\tconsole.log(\"websocket closing. Code:\", code);\r\n\t\t\tactive_socket = false;\r\n\t\t}\r\n\r\n\t\tws.onerror = function (evt) {\r\n\t\t\tconsole.log(\"Websocket Error\");\r\n\t\t\tconsole.log(\"Error Code: \", evt.data);\r\n\t\t}\r\n\t\tws.onmessage = function (event) {\r\n\t\t\tconsole.log('Received Message');\r\n\t\t\tconsole.log(event.data);\r\n\t\t\tgeneralMessageRouter(JSON.parse(event.data));\r\n\r\n\t\t};\r\n\t}\r\n}\r\n\r\n/* Sends a message to the server\r\n*\r\n*/\r\nfunction send(message) {\r\n\t//If the server is already open then sent the message\r\n\tif (active_socket) {\r\n\t\tws.send(message)\r\n\t} else {\r\n\t\t//if server is not connected, then connect first\r\n\t\tconnect();\r\n\t\tsetTimeout(function () { ws.send(message); }, 500);\r\n\t}\r\n}\r\n\r\nexport { send };","import React from 'react';\r\nimport '../App.css';\r\nimport {generalMessageRouter} from './messaging/GeneralMessageRouter'\r\nimport {sendLoginMessage, sendCreateUserMessage} from './messaging/UserServiceMessages'\r\n\r\nclass LoginPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { value: '' };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n        this.handleCreate = this.handleCreate.bind(this);\r\n\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    handleLogin(event) {\r\n        event.preventDefault();\r\n        sendLoginMessage(this.state.value);\r\n    }\r\n\r\n    handleCreate(event) {\r\n        event.preventDefault();\r\n        sendCreateUserMessage(this.state.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"section is-fullheight\">\r\n                <div className=\"container\">\r\n                    <div className=\"column is-4 is-offset-4\">\r\n                        <div className=\"box\">\r\n                            <form onSubmit={this.handleSubmit}>\r\n                                <div className=\"field\">\r\n                                    <label className=\"label\">User Name</label>\r\n                                    <div className=\"control\">\r\n                                        <input className=\"input\" type=\"text\" name=\"username\" onChange={this.handleChange} />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"buttons is-grouped\">\r\n                                    <button type=\"button\" className=\"button is-block is-info is-fullwidth\" onClick={this.handleLogin}>Login</button>\r\n                                    <button type=\"button\" className=\"button is-block is-info is-fullwidth\" onClick={this.handleCreate}>Create</button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginPage;","import {messageTypes} from './GeneralMessageRouter'\r\nimport {userServiceContent} from './UserServiceMessageProcessing'\r\nimport {send} from './WebSocket'\r\n\r\n/* Sends a user login request to server\r\n * \r\n * @param username - user name to login into\r\n */\r\nfunction sendLoginMessage(username) {\r\n\t\r\n\t//Send user creation request\r\n    var json = JSON.stringify({\r\n    \t\"type\": messageTypes.USER_SERVICE,\r\n\t\t\"contentType\": userServiceContent.LOGIN,\r\n        \"content\": username\r\n    });\r\n    \r\n    console.log(json);\r\n    send(json);\r\n    \r\n}\r\n\r\n/*Sends a user creation request to server\r\n * \r\n * @param username - user name to create\r\n */\r\nfunction sendCreateUserMessage(username) {\r\n\r\n\t//Send user creation request\r\n    var json = JSON.stringify({\r\n    \t\"type\": messageTypes.USER_SERVICE,\r\n\t\t\"contentType\": userServiceContent.USER_CREATE,\r\n        \"content\": username\r\n   });\r\n   send(json);\r\n}\r\n\r\n\r\n\r\n/*Sends a user name search request to server\r\n * \r\n * @param username - user name search for, could be partial characters\r\n */\r\nfunction sendSearchForUsernameMessage(username) {\r\n\t//Send user creation request\r\n    var json = JSON.stringify({\r\n    \t\"type\": messageTypes.USER_SERVICE,\r\n\t\t\"contentType\": userServiceContent.SEARCH_USERS_BY_NAME,\r\n        \"content\": username\r\n   });\r\n    \r\n   send(json);\r\n}\r\n\r\n/*Sends a user friend request to server\r\n * \r\n * @param username - user name to friend\r\n */\r\nfunction sendFriendUser(username) {\r\n\r\n\t//Send user creation request\r\n    var json = JSON.stringify({\r\n    \t\"type\": messageTypes.USER_SERVICE,\r\n\t\t\"contentType\": userServiceContent.FRIEND_USER,\r\n        \"content\": username\r\n   });\r\n    \r\n   send(json);\r\n}\r\n\r\nexport {sendLoginMessage, sendCreateUserMessage};","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <header>\r\n            <h1>TautChat</h1>\r\n            <Link to=\"/\">Home</Link> | {' '}\r\n            <Link to=\"/about\">About</Link> | {' '}\r\n            <Link to=\"/chat\">Chat</Link> | {' '}\r\n            <Link to=\"/groupchat\">GroupChat</Link>\r\n        </header>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>About</h1>\r\n            <p>This is a to do list app v0.0.1</p>\r\n        </React.Fragment>\r\n    )\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class MessageItem extends Component {\r\n    getStyle = () => {\r\n        return {\r\n            background: '#f4f4f4',\r\n            padding: '10px',\r\n            borderBottom: '1px #ccc dotted',\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const { from, to, content  } = this.props.message;\r\n\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                <p>\r\n                    {from}\r\n                    {'->'}\r\n                    {to}\r\n                    {': '}\r\n                    {content}\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nMessageItem.propTypes = {\r\n    message: PropTypes.object.isRequired\r\n}\r\n\r\nexport default MessageItem","import React, { Component } from 'react'\r\n\r\nexport class AddMessage extends Component {\r\n    state = {\r\n        content: ''\r\n    }\r\n\r\n    onChange = (e) => this.setState({[e.target.name]: e.target.value});\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addMessage(this.state.content);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit} style = {{display: 'flex'}}>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"content\"\r\n                    placeholder=\"Type Message Here\"\r\n                    style={{flex: '10', padding: '5px'}}\r\n                    value={this.state.content}\r\n                    onChange={this.onChange}\r\n                />\r\n                <input\r\n                    type=\"submit\"\r\n                    value=\"Submit\"\r\n                    className=\"btn\"\r\n                    style = {{flex: '1'}}\r\n                />\r\n            </form>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddMessage","import React, { Component } from 'react';\r\nimport MessageItem from './MessageItem'\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios'\r\nimport uuid from 'uuid'\r\n\r\nclass Messages extends Component {\r\n    render() {\r\n        return this.props.messages.map((message) => (\r\n            <MessageItem message={message} filterMessages={this.filterMessages} />\r\n        ));\r\n    }\r\n}\r\n\r\nMessages.propTypes = {\r\n    messages: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Messages;","import { messageTypes } from \"./GeneralMessageRouter\";\r\n\r\n\r\n/* Enumeration for non-service message content types\r\n * \r\n */\r\nconst contentTypes = {\r\n\t/**\r\n\t* Represents Standard ASCII Text content\r\n\t*/\r\n\tASCII: 'ASCII',\r\n\r\n\t/**\r\n\t* Represents GROUP_MESSAGE ASCII content\r\n\t*/\r\n\tGROUP_MESSAGE: 'GROUP_MESSAGE',\r\n\t\r\n}\r\n\r\n/* Routes received user service messages to correct logic\r\n * \r\n * @param json message - json of user service type message\r\n */\r\nfunction chatMessageRouter(message) {\r\n\t//  Process Broadcast\r\n\tif (message.type == messageTypes.BROADCAST_MESSAGE) {\r\n\t\tprocessBroadcastChatMessage(message);\r\n\r\n\t} else if (message.type == messageTypes.DIRECT_MESSAGE) {\r\n\t\t//Process Direct Message \r\n\t\t\r\n\t\tif (message.contentType == contentTypes.GROUP_MESSAGE){\r\n\t\t\t//Process Group Message\r\n\t\t\tprocessGroupMessage(message);\r\n\t\t}\r\n\t\telse{\r\n\t\t\t//Process ASCII Message (assumed content for now)\r\n\t\t\tprocessDirectChatMessage(message);\r\n\t\t}\r\n\t\t\t\r\n\t\r\n\t}\r\n}\r\n\r\n\r\n/* Processes recieved direct message chat\r\n * \r\n * @param json message - json of chat type message\r\n */\r\nfunction processDirectChatMessage(message) {\r\n\t//TODO Chad put in GUI logic\r\n\r\n}\r\n\r\n\r\n/* Processes recieved broadcast message chat\r\n * \r\n * @param json message - json of chat type message\r\n */\r\nfunction processBroadcastChatMessage(message) {\r\n\t//TODO Chad put in GUI logic\r\n\r\n}\r\n\r\n\r\n\r\n/* Processes recieved group message chat\r\n * \r\n * @param json message - json of chat type message\r\n */\r\nfunction processGroupMessage(message) {\r\n\t//TODO Chad put in GUI logic\r\n}\r\n\r\n\r\n// TODO Chad, you can use these colors or do something else\r\n// I was just putting them here as an example\r\n\r\n/* Enumeration colors to use for sentiment\r\n * \r\n */\r\nconst sentimentColors = {\r\n    NEGATIVE:  '#d00', //Red\r\n    NEUTRAL: '\t#383838', //Dark Gray\r\n    POSITIVE: '#009d00' //Green\r\n}\r\n\r\n\r\n/* Enumeration representing positive, negative, and neutral sentiments\r\n* \r\n*/\r\nconst sentiment = {\r\n    NEGATIVE:  '0', \r\n    NEUTRAL: '1',\t \r\n    POSITIVE: '2' \r\n}\r\n\r\n//TODO Chad, I'm not sure how you'll want to display the sentiment information\r\n// in the GUI. Below is just an example of a template you can use to iterate through\r\n// The sentiments of the content.\r\n// The message.content should be the same size as the message.sentiment\r\n// Each character of the content has a sentiment value associated with it, either 0,1, or 2 (see the sentiment enumeration above)\r\n\r\n\r\n/* Template function that shows how content and sentiment are associate\r\n * Feel free to update this to something with useful functionality\r\n *  \r\n * @param json message - json of chat type message\r\n */\r\nfunction processSentimentContent(message){\r\n\t\r\n\t\r\n\tfor (var i = 0; i < message.content.length; i++) {\r\n\t\t  \r\n\t\tswitch(message.sentiment.charAt(i)){\r\n\t\t\t\r\n\t\t\tcase sentiment.NEGATIVE:\r\n\t\t\t\t//TODO chad feel free to add logic\r\n\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\tcase sentiment.POSITIVE:\r\n\t\t\t\t//TODO chad feel free to add logic\r\n\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\tcase sentiment.NEUTRAL:\r\n\t\t\t\t//TODO chad feel free to add logic\r\n\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n\r\nexport {contentTypes}","import React, { Component } from 'react';\r\nimport MessageItem from './MessageItem'\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios'\r\nimport uuid from 'uuid'\r\nimport AddMessage from './AddMessage';\r\nimport Messages from './Messages';\r\nimport { generalMessageRouter } from '../components/messaging/GeneralMessageRouter'\r\nimport {sendDirectMessage} from '../components/messaging/ChatMessages'\r\n\r\nclass Messenger extends Component {\r\n\r\n    state = {\r\n        messages: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadPersistentMessages();\r\n    }\r\n\r\n    loadPersistentMessages() {\r\n        const { currentUser, messageWith } = this.props.match.params\r\n        console.log('Current user is: %s', currentUser)\r\n        console.log('Current friend is: %s', messageWith)\r\n\r\n        axios.get(\"/../exampleJSON.json\")\r\n            .then(res => this.setState({ messages: res.data }, function () {\r\n                console.log(this.state);\r\n                this.filterMessages(currentUser, messageWith);\r\n            }));\r\n    }\r\n\r\n    filterMessages = (currentUser, messageWith) => {\r\n        console.log(this.state.messages)\r\n        const newMessages = this.state.messages.filter(messages =>\r\n            ((messages.from === currentUser) || (messages.from === messageWith)));\r\n        const newMessages1 = newMessages.filter(messages =>\r\n            ((messages.to === currentUser) || (messages.to === messageWith)));\r\n        console.log(newMessages1);\r\n        this.setState({ messages: newMessages1 });\r\n\r\n    };\r\n\r\n    //Add Item\r\n    addMessage = (content) => {\r\n        const { currentUser, messageWith } = this.props.match.params\r\n\r\n        const newMessage = {\r\n            content,\r\n            contentType: \"DIRECT_MESSAGE\",\r\n            from: currentUser,\r\n            to: messageWith,\r\n            key: uuid.v4()\r\n        }\r\n\r\n        this.setState({ messages: [...this.state.messages, newMessage] });\r\n\r\n        sendDirectMessage(newMessage);\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Messages messages={this.state.messages} />\r\n                <AddMessage addMessage={this.addMessage} />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Messenger;","import { messageTypes } from './GeneralMessageRouter'\r\nimport { send } from './WebSocket'\r\nimport { contentTypes } from './ChatMessageProcessing'\r\n\r\n/* Sends a broadcastmessage from chat\r\n *\r\n * @param contentType - the content type being sent (see enums)\r\n * @param content - the content to send\r\n *\r\n */\r\nfunction sendBroadCastMessage(message) {\r\n\r\n    var json = JSON.stringify({\r\n        \"type\": messageTypes.BROADCAST_MESSAGE,\r\n        \"content_type\": message.contentType,\r\n        \"content\": message.content\r\n    });\r\n\r\n    send(json);\r\n}\r\n\r\n/* Sends a direct user message from chat\r\n*\r\n* @param contentType - the content type being sent (see enums)\r\n* @param content - the content to send\r\n* @param username - username to send message to \r\n*\r\n*/\r\nfunction sendDirectMessage(message) {\r\n\r\n    //Send user creation request\r\n    var json = JSON.stringify({\r\n    \t\"type\": messageTypes.DIRECT_MESSAGE,\r\n        \"from\": message.from,\r\n        \"to\" :  message.to,\r\n        \"contentType\": contentTypes.ASCII,\r\n        \"content\": message.content\r\n    });\r\n\r\n    console.log(json);\r\n    send(json);\r\n}\r\n\r\n\r\n/* Sends a group ascii message rom chat\r\n*\r\n* @param content - the content to send\r\n* @param groupname - username to send message to \r\n*\r\n*/\r\nfunction sendGroupMessage(message) {\r\n\r\n    var json = JSON.stringify({\r\n        \"to\": message.to,\r\n        \"type\": messageTypes.DIRECT_MESSAGE,\r\n        \"content_type\": contentTypes.GROUP_MESSAGE,\r\n        \"content\": message.content\r\n    });\r\n\r\n    send(json);\r\n}\r\n\r\nexport { sendDirectMessage, sendGroupMessage, sendBroadCastMessage }","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n} from \"react-router-dom\";\nimport './App.css';\nimport LoginPage from './components/LoginPage';\nimport Header from './components/layout/Header';\nimport About from './components/pages/About';\nimport Messenger from './components/Messenger';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Router basename=\"prattle\">\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <Route exact path=\"/\" component={LoginPage} />\n            <Route path=\"/about\" component={About} />\n            <Route path=\"/chat/:currentUser?/:messageWith?\" component={Messenger} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bulma/css/bulma.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}
{"version":3,"sources":["LoginPage.js","components/layout/Header.js","components/pages/About.js","AddMessage.js","MessageItem.js","Messages.js","ToField.js","UserItem.js","Users.js","Messenger.js","UserServiceMessageProcessing.js","ChatMessageProcessing.js","GeneralMessageRouter.js","WebSocket.js","App.js","index.js"],"names":["LoginPage","props","state","value","handleChange","bind","handleLogin","handleCreate","event","this","setState","target","preventDefault","json","JSON","stringify","console","log","send","username","to","className","onSubmit","type","name","onChange","onClick","React","Component","Header","display","prevProps","About","fontSize","padding","Fragment","style","getStyle","AddMessage","content","e","addMessage","placeholder","flex","MessageItem","from","textAlign","getNameStyle","getFontStyle","sentiment","sentTest","charAt","color","message","Messages","messages","map","filterMessages","messageWith","ToField","setTo","UserItem","user","Users","users","Messenger","groups","currentUser","newMessages1","filter","addToChatBox","newMessage","queuedMessage","userServiceContent","LOGIN","USER_CREATE","SEARCH_USERS_BY_NAME","FRIEND_USER","userServiveMessageRouter","contentType","includes","genericMessageResponses","SUCCESS","alert","FAILURE","processLoginResponse","processUserCreateResponse","contentTypes","ASCII","GROUP_MESSAGE","processDirectChatMessage","ws","messageTypes","USER_SERVICE","SESSION_SERVICE","GROUP_SERVICE","DIRECT_MESSAGE","BROADCAST_MESSAGE","generalMessageRouter","chatMessageRouter","connect","document","location","host","pathname","WebSocket","onopen","onclose","code","onerror","evt","data","onmessage","parse","App","active_socket","authenticated","setTimeout","basename","exact","path","render","routeProps","component","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.f70f4b03.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport './App.css';\r\n\r\nclass LoginPage extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { value: '' };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n        this.handleCreate = this.handleCreate.bind(this);\r\n\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    handleLogin(event) {\r\n        event.preventDefault();\r\n        //Send user creation request\r\n        var json = JSON.stringify({\r\n            \"type\": \"USER_SERVICE\",\r\n            \"contentType\": \"LOGIN\",\r\n            \"content\": this.state.value\r\n        });\r\n\r\n        console.log(\"Logging in as %s\", this.state.value)\r\n\r\n        this.props.send(json);\r\n    }\r\n\r\n    handleCreate(event) {\r\n        event.preventDefault();\r\n\r\n        var json = JSON.stringify({\r\n            \"type\": \"USER_SERVICE\",\r\n            \"contentType\": \"USER_CREATE\",\r\n            \"content\": this.state.value\r\n        });\r\n\r\n        console.log(\"Creating new user: %s\", this.state.value)\r\n        this.props.send(json);\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return this.props.username !==  null ? (\r\n            <Redirect to=\"/chat\" />\r\n        ) : (\r\n                <div className=\"section is-fullheight\">\r\n                    <div className=\"container\">\r\n                        <div className=\"column is-4 is-offset-4\">\r\n                            <div className=\"box\">\r\n                                <form onSubmit={this.handleLogin}>\r\n                                    <div className=\"field\">\r\n                                        <label className=\"label\">User Name</label>\r\n                                        <div className=\"control\">\r\n                                            <input className=\"input\" type=\"text\" name=\"username\" onChange={this.handleChange} />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"buttons is-grouped\">\r\n                                        <button type=\"button\" className=\"button is-block is-info is-fullwidth\" onClick={this.handleLogin}>Login</button>\r\n                                        <button type=\"button\" className=\"button is-block is-info is-fullwidth\" onClick={this.handleCreate}>Create</button>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default LoginPage;","import {Link} from 'react-router-dom'\r\nimport React, { Component } from 'react'\r\n\r\nexport class Header extends Component {\r\n\r\n    state = {\r\n        display: 'TautChat'\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        // Typical usage (don't forget to compare props):\r\n        if (this.props.username !== prevProps.username) {\r\n            var display = \"Hi, \" + this.props.username + \"!\"\r\n            this.setState({display:display})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            \r\n            <header>\r\n                <h1>{this.state.display}</h1>\r\n                <Link to=\"/\">Home</Link> | {' '}\r\n                <Link to=\"/chat\">Chat</Link> | {' '}\r\n                {/* <Link to=\"/groupchat\">GroupChat</Link>| {' '} */}\r\n                <Link to=\"/about\">About</Link>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","import React, { Component } from 'react'\r\n\r\nexport class About extends Component {\r\n\r\n    getStyle() {\r\n        return {\r\n            fontSize: '12px',\r\n            padding: '30px',\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div style={this.getStyle()}>\r\n                    <p>TautChat was established in 2019 by 4 dashing young professionals looking to expand their careers into the world of software development. They would like to thank to the following people for their support during development:</p>\r\n                    <p>Michael Weintraub</p>\r\n                    <p>Vaibhav Dave</p>\r\n                    <p>Alex Grob</p>\r\n\r\n                </div>\r\n\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default About","import React, { Component } from 'react'\r\n\r\nexport class AddMessage extends Component {\r\n    state = {\r\n        content: ''\r\n    }\r\n\r\n    onChange = (e) => this.setState({[e.target.name]: e.target.value});\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addMessage(this.state.content);\r\n        this.setState({content:''})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit} style = {{display: 'flex'}}>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"content\"\r\n                    placeholder=\"Type Message Here\"\r\n                    style={{flex: '10', padding: '5px'}}\r\n                    value={this.state.content}\r\n                    onChange={this.onChange}\r\n                />\r\n                <input\r\n                    type=\"submit\"\r\n                    value=\"Submit\"\r\n                    className=\"btn\"\r\n                    style = {{flex: '1'}}\r\n                />\r\n            </form>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddMessage","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class MessageItem extends Component {\r\n    getStyle = (from) => {\r\n        if (this.props.username === from) {\r\n            return {\r\n                fontSize: '20px',\r\n                textAlign: 'right',\r\n                padding: '10px',\r\n            }\r\n        }\r\n        else {\r\n            return {\r\n                fontSize: '20px',\r\n                textAlign: 'left',\r\n                padding: '10px',\r\n            }\r\n        }\r\n    }\r\n\r\n    getNameStyle = (from) => {\r\n        return {\r\n            fontSize: '14px',\r\n            padding: '1px',\r\n        }\r\n    }\r\n\r\n    getFontStyle = (sentiment) => {\r\n        var sentTest = sentiment.charAt(0);\r\n        console.log(sentTest)\r\n\r\n\r\n        switch (sentTest) {\r\n\r\n            case \"0\":\r\n                return {\r\n                    color: '#FF0000'\r\n                }\r\n\r\n            case \"1\":\r\n                return {\r\n                    color: '#696969'\r\n                }\r\n\r\n            case \"2\":\r\n                return {\r\n                    color: '#7CFC00'\r\n                }\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const { from, to, content, sentiment } = this.props.message;\r\n        console.log(sentiment)\r\n\r\n        return (\r\n            <div style={this.getStyle(from)}>\r\n                <p style={this.getNameStyle()}>\r\n                    {from}\r\n                </p>\r\n                <p style={this.getFontStyle(sentiment)}>\r\n                    {content}\r\n                </p>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nMessageItem.propTypes = {\r\n    message: PropTypes.object.isRequired\r\n}\r\n\r\nexport default MessageItem","import React, { Component } from 'react';\r\nimport MessageItem from './MessageItem'\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Messages extends Component {\r\n    render() {\r\n        return this.props.messages.map((message) => (\r\n            <MessageItem message={message} filterMessages={this.filterMessages} username={this.props.username} messageWith={this.props.messageWith}/>\r\n        ));\r\n    }\r\n}\r\n\r\nMessages.propTypes = {\r\n    messages: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Messages;","import React, { Component } from 'react'\r\n\r\nexport class ToField extends Component {\r\n\r\n    state = {\r\n        messageWith: ''\r\n    }\r\n\r\n    onChange = (e) => {\r\n\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        }, () => {\r\n            this.props.setTo(this.state.messageWith);\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form style={{ display: 'flex' }}>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"messageWith\"\r\n                    placeholder=\"Who To Message\"\r\n                    style={{ flex: '10', padding: '5px' }}\r\n                    value={this.state.messageWith}\r\n                    onChange={this.onChange}\r\n                />\r\n            </form>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToField","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class UserItem extends Component {\r\n    render() {\r\n\r\n        const { from } = this.props.user;\r\n\r\n        return (\r\n            <div>\r\n                <p>\r\n                    {from}\r\n                </p>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nUserItem.propTypes = {\r\n    user: PropTypes.object.isRequired\r\n}\r\n\r\nexport default UserItem","import React, { Component } from 'react';\r\nimport UserItem from './UserItem'\r\nimport PropTypes from 'prop-types';\r\nimport {Link} from 'react-router-dom'\r\n\r\nclass Users extends Component {\r\n    render() {\r\n        // return (this.props.users.map((user) => (\r\n        //         <li key={user}>\r\n        //           <Link to=\"/\">Click</Link>\r\n        //         </li>\r\n        //       )\r\n        // )\r\n\r\n        \r\n        return this.props.users.map((user) => (\r\n            <UserItem user={user} username={this.props.username}/>\r\n        ));\r\n    }\r\n}\r\n\r\nUsers.propTypes = {\r\n    users: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Users;","import React, { Component } from 'react';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport AddMessage from './AddMessage';\r\nimport Messages from './Messages';\r\nimport ToField from './ToField';\r\nimport Users from './Users';\r\n\r\nclass Messenger extends Component {\r\n\r\n    state = {\r\n        messageWith: '',\r\n        messages: [],\r\n        users: [],\r\n        groups: []\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        // Typical usage (don't forget to compare props):\r\n        if (this.props.queuedMessage !== prevProps.queuedMessage) {\r\n            this.addToChatBox(this.props.queuedMessage)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.props.username)\r\n    }\r\n\r\n    filterMessages = () => {\r\n        const messageWith = this.state.messageWith\r\n        const currentUser = this.props.username\r\n        console.log(\"Starting filtered messages\")\r\n        console.log(this.state.messages)\r\n        const newMessages = this.state.messages.filter(messages =>\r\n            ((messages.from === currentUser) || (messages.from === messageWith)));\r\n        const newMessages1 = newMessages.filter(messages =>\r\n            ((messages.to === currentUser) || (messages.to === messageWith)));\r\n        console.log(newMessages1);\r\n        this.setState({ messages: newMessages1 });\r\n    };\r\n\r\n    addToChatBox = (newMessage) => {\r\n        this.setState({\r\n            messages: [...this.state.messages, newMessage]\r\n        }, () => {\r\n            this.filterMessages();\r\n        });\r\n    }\r\n\r\n\r\n    setTo = (to) => {\r\n        this.setState({ messageWith: to })\r\n    }\r\n\r\n    //Add Item\r\n    addMessage = (content) => {\r\n        var json = JSON.stringify({\r\n            \"type\": \"BROADCAST_MESSAGE\",\r\n            \"from\": this.props.username,\r\n            \"to\": this.state.messageWith,\r\n            \"contentType\": \"ASCII\",\r\n            \"content\": content\r\n        });\r\n\r\n        console.log(json);\r\n        this.props.send(json);\r\n    }\r\n\r\n    render() {\r\n\r\n        return this.props.username === null ? (\r\n            <Redirect to=\"/\" />\r\n        ) : (\r\n                <React.Fragment>\r\n                    <Users users={this.state.users} />\r\n                    <ToField setTo={this.setTo} />\r\n                    <Messages messages={this.state.messages} username={this.props.username} messageWith={this.state.messageWith} />\r\n                    <AddMessage addMessage={this.addMessage} />\r\n                </React.Fragment>\r\n            );\r\n    }\r\n}\r\n\r\nexport default Messenger;","import {genericMessageResponses} from './GeneralMessageRouter';\r\nimport { withRouter } from 'react-router'\r\n\r\nvar status_label;\r\n\r\n/* Enumeration for message types service messages\r\n * \r\n */\r\n\r\nconst colors = {\r\n\t    RED:  '#d00',\r\n\t    GREEN: '#009d00'\r\n}\r\n \r\nconst userServiceContent = {\r\n\t\r\n\t  /**\r\n\t   * Represents Login Command\r\n\t   */\r\n\t   LOGIN: 'LOGIN',\r\n\t  /**\r\n\t   * Represents User Create Command\r\n\t   */\r\n\t   USER_CREATE: 'USER_CREATE',\r\n\t  /**\r\n\t   * Represents Search for User by Name Command \r\n\t   */\r\n\t   SEARCH_USERS_BY_NAME: 'SEARCH_USERS_BY_NAME',\r\n\t  /**\r\n\t   * Represents a Front User Command (TODO Hookup backend)\r\n\t   */\r\n\t   FRIEND_USER: 'FRIEND_USER',\r\n\t   \r\n}\r\n\r\n\r\n\r\n/* Routes received user service messages to correct logic\r\n * \r\n * @param json message - json of user service type message\r\n */\r\nfunction userServiveMessageRouter(message) {\r\n\t\r\n\t//  Check if it's a login response\r\n\tif (message.contentType == userServiceContent.LOGIN) {\r\n\t\tprocessLoginResponse(message);\r\n\t}\r\n\t\r\n\t//  Check if it's a create user response\r\n\tif (message.contentType == userServiceContent.USER_CREATE) {\r\n\t\t//  process chat message\r\n\t\tprocessUserCreateResponse(message);\r\n\t}\r\n\t\r\n\t//  Check if it's a create user response\r\n\tif (message.contentType == userServiceContent.SEARCH_USERS_BY_NAME) {\r\n\t\t//  process chat message\r\n\t\tprocessUserSearchResponse(message);\r\n\t}\r\n\r\n}\r\n\r\n\r\n//TODO Chad add your Swap this for your GUI references\r\n\r\n/* Process server response for user login\r\n*\r\n* @param json message - json of user service type message of login response\r\n*/\r\nfunction processLoginResponse(message){\r\n\tif (message.content.includes(genericMessageResponses.SUCCESS)){\r\n\t\tconsole.log(\"SUCCESS: User successfully logged into session.\");\r\n\t\talert(\"User successfully logged into session.\");\r\n\t\t// If unsuccessful this should run\r\n\t\t// status_label.style.color = colors.GREEN;\r\n\t    // status_label.innerHTML =  \"SUCCESS: User successfully logged into session.\";\t\r\n\t}else if (message.content.includes(genericMessageResponses.FAILURE)){\r\n\t\tconsole.log(\"ERROR: User Name Does not Exist. Please Create User First.\");\r\n\t\talert(\"User Name Does not Exist. Please Create User First.\");\r\n\t\t// If unsuccessful this should run\r\n\t\t// status_label.style.color = colors.RED;\r\n\t    // status_label.innerHTML =  \"ERROR: User Name Does not Exist. Please Create User First.\";\t\r\n\t}\r\n}\r\n\r\n//TODO Chad add your Swap this for your GUI references\r\n\r\n/*Process server response for user creation\r\n * \r\n* @param json message - json of user service type message of create user response\r\n */\r\nfunction processUserCreateResponse(message){\r\n\tif (message.content.includes(genericMessageResponses.SUCCESS)){\r\n\t\tconsole.log(\"User Successfully Created!\");   \r\n\t\talert(\"User Successfully Created!\"); \r\n\t\t//If successful this should run\r\n\t\t// status_label.style.color = colors.GREEN;\r\n\t\t// status_label.innerHTML =  \"User Successfully Created!\";\r\n\t}else if (message.content.includes(genericMessageResponses.FAILURE)){\r\n\t\tconsole.log(\"ERROR: Could Not Create User Name. Please Try Another Name.\");\r\n\t\talert(\"This User Name is already taken. Please Try Another Name.\");\r\n\t    // If unsuccessful this should run\r\n\t\t// status_label.style.color = colors.RED;\r\n\t\t// status_label.innerHTML =  \"ERROR: Could Not Create User Name. Please Try Another Name.\";\t\r\n\t}\r\n}\r\n\r\n\r\n/*Process server response for user friending\r\n * \r\n* @param json message - json of user service type message of user friend\r\n */\r\nfunction processFriendUserResponse(message){\r\n\t\r\n\t//TODO Chad add your GUI logic here\r\n\r\n\tif (message.content.includes(genericMessageResponses.SUCCESS)){\r\n\r\n\t}else if (message.content.includes(genericMessageResponses.FAILURE)){\r\n\r\n\t}\r\n}\r\n\r\n/*Process server response for searching for user names\r\n * \r\n* @param json message - json of user service type message of username search message\r\n */\r\nfunction processUserSearchResponse(message){\r\n\t//TODO Chad add your GUI logic here\r\n}\r\n\r\n\r\nexport {userServiveMessageRouter, userServiceContent};","import { messageTypes } from \"./GeneralMessageRouter\";\r\nimport Messenger from './Messenger';\r\n\r\n/* Enumeration for non-service message content types\r\n * \r\n */\r\nconst contentTypes = {\r\n\t/**\r\n\t* Represents Standard ASCII Text content\r\n\t*/\r\n\tASCII: 'ASCII',\r\n\r\n\t/**\r\n\t* Represents GROUP_MESSAGE ASCII content\r\n\t*/\r\n\tGROUP_MESSAGE: 'GROUP_MESSAGE',\r\n\t\r\n}\r\n\r\n/* Routes received user service messages to correct logic\r\n * \r\n * @param json message - json of user service type message\r\n */\r\nfunction chatMessageRouter(message) {\r\n\t//  Process Broadcast\r\n\tif (message.type == messageTypes.BROADCAST_MESSAGE) {\r\n\t\tprocessDirectChatMessage(message);\r\n\t} else if (message.type == messageTypes.DIRECT_MESSAGE) {\r\n\t\tif (message.contentType == contentTypes.GROUP_MESSAGE){\r\n\t\t\tprocessGroupMessage(message);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tprocessDirectChatMessage(message);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/* Processes recieved direct message chat\r\n * \r\n * @param json message - json of chat type message\r\n */\r\nfunction processDirectChatMessage(message) {\r\n\tconsole.log(\"I got something to use\");\r\n\tconsole.log(message);\r\n}\r\n\r\n/* Processes recieved broadcast message chat\r\n * \r\n * @param json message - json of chat type message\r\n */\r\nfunction processBroadcastChatMessage(message) {\r\n\t//TODO Chad put in GUI logic\r\n\r\n}\r\n\r\n\r\n\r\n/* Processes recieved group message chat\r\n * \r\n * @param json message - json of chat type message\r\n */\r\nfunction processGroupMessage(message) {\r\n\t//TODO Chad put in GUI logic\r\n}\r\n\r\n\r\n// TODO Chad, you can use these colors or do something else\r\n// I was just putting them here as an example\r\n\r\n/* Enumeration colors to use for sentiment\r\n * \r\n */\r\nconst sentimentColors = {\r\n    NEGATIVE:  '#d00', //Red\r\n    NEUTRAL: '\t#383838', //Dark Gray\r\n    POSITIVE: '#009d00' //Green\r\n}\r\n\r\n\r\n/* Enumeration representing positive, negative, and neutral sentiments\r\n* \r\n*/\r\nconst sentiment = {\r\n    NEGATIVE:  '0', \r\n    NEUTRAL: '1',\t \r\n    POSITIVE: '2' \r\n}\r\n\r\n//TODO Chad, I'm not sure how you'll want to display the sentiment information\r\n// in the GUI. Below is just an example of a template you can use to iterate through\r\n// The sentiments of the content.\r\n// The message.content should be the same size as the message.sentiment\r\n// Each character of the content has a sentiment value associated with it, either 0,1, or 2 (see the sentiment enumeration above)\r\n\r\n\r\n/* Template function that shows how content and sentiment are associate\r\n * Feel free to update this to something with useful functionality\r\n *  \r\n * @param json message - json of chat type message\r\n */\r\nfunction processSentimentContent(message){\r\n\t\r\n\t\r\n\tfor (var i = 0; i < message.content.length; i++) {\r\n\t\t  \r\n\t\tswitch(message.sentiment.charAt(i)){\r\n\t\t\t\r\n\t\t\tcase sentiment.NEGATIVE:\r\n\t\t\t\t//TODO chad feel free to add logic\r\n\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\tcase sentiment.POSITIVE:\r\n\t\t\t\t//TODO chad feel free to add logic\r\n\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\tcase sentiment.NEUTRAL:\r\n\t\t\t\t//TODO chad feel free to add logic\r\n\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n\r\nexport {contentTypes, chatMessageRouter}","\r\nimport { userServiveMessageRouter } from './UserServiceMessageProcessing'\r\nimport {chatMessageRouter} from './ChatMessageProcessing'\r\n\r\n/* Enumeration for message types service messages\r\n * \r\n */\r\nconst messageTypes = {\r\n\r\n\tUSER_SERVICE: 'USER_SERVICE',\r\n\t/**\r\n\t* Represents Session Service Address\r\n\t*/\r\n\tSESSION_SERVICE: 'SESSION_SERVICE',\r\n\t/**\r\n\t* Represents Group Service Address\r\n\t*/\r\n\tGROUP_SERVICE: 'GROUP_SERVICE',\r\n\t/**\r\n\t* Represents group message address\r\n\t*/\r\n\tGROUP_MESSAGE: 'GROUP_MESSAGE',\r\n    /**\r\n\t* Represents a direct message address\r\n\t*/\r\n\tDIRECT_MESSAGE: 'DIRECT_MESSAGE',\r\n    /**\r\n\t* Represents a broadcast message address\r\n\t*/\r\n\tBROADCAST_MESSAGE: 'BROADCAST_MESSAGE',\r\n\r\n}\r\n\r\n\r\n\r\nconst genericMessageResponses = {\r\n\t/**\r\n\t* Represents a Success message\r\n\t*/\r\n\tSUCCESS: 'SUCCESS',\r\n\t/**\r\n\t* Represents a Failure message\r\n\t*/\r\n\tFAILURE: 'FAILURE',\r\n\r\n}\r\n\r\n\r\n/* Routes received messages to correct logic\r\n * \r\n * @param json message - json of message\r\n */\r\nfunction generalMessageRouter(message) {\r\n\tconsole.log(\"General message router\")\r\n\tconsole.log(message);\r\n\tif (message.type == messageTypes.BROADCAST_MESSAGE) {\r\n\t\t// process chat message\r\n\t\tconsole.log(\"I'm going to go process this broadcast\")\r\n\t\tchatMessageRouter(message);\r\n\t}\r\n\tif (message.from == messageTypes.USER_SERVICE) {\r\n\t\t//  process user server message\r\n\t\tuserServiveMessageRouter(message);\r\n\t}\r\n}\r\n\r\n\r\nexport { generalMessageRouter, messageTypes, genericMessageResponses };","import { generalMessageRouter } from './GeneralMessageRouter'\r\nimport { sendLoginMessage, sendCreateUserMessage } from './UserServiceMessages'\r\n\r\nvar ws;\r\nvar username;\r\nvar active_socket = false;\r\n/* Enumeration for colors\r\n * \r\n */\r\n\r\n/* Connects to the server and sets up call back for messaging events\r\n * \r\n */\r\nfunction connect() {\r\n\tconsole.log('Checking Socket Connection');\r\n\r\n\tif (typeof ws === 'undefined') {\r\n\r\n\t\tconsole.log('Connecting to Socket');\r\n\r\n\t\tvar host = document.location.host;\r\n\t\tvar pathname = document.location.pathname;\r\n\r\n\t\t//Hard coded for testing purposes\r\n\t\tws = new WebSocket(\"ws://localhost:8080/prattle/chat/\");\r\n\t\t// ws = new WebSocket(\"ws://\" +host  + pathname + \"chat/\");\r\n\r\n\t\tws.onopen = function () {\r\n\t\t\tconsole.log('Connection open!');\r\n\t\t\tactive_socket = true;\r\n\t\t}\r\n\r\n\t\tws.onclose = function (code) {\r\n\t\t\tconsole.log(\"websocket closing. Code:\", code);\r\n\t\t\tactive_socket = false;\r\n\t\t}\r\n\r\n\t\tws.onerror = function (evt) {\r\n\t\t\tconsole.log(\"Websocket Error\");\r\n\t\t\tconsole.log(\"Error Code: \", evt.data);\r\n\t\t}\r\n\t\tws.onmessage = function (event) {\r\n\t\t\tconsole.log('Received Message');\r\n\t\t\tconsole.log(event.data);\r\n\t\t\tgeneralMessageRouter(JSON.parse(event.data));\r\n\r\n\t\t};\r\n\t}\r\n}\r\n\r\n/* Sends a message to the server\r\n*\r\n*/\r\nfunction send(message) {\r\n\t//If the server is already open then sent the message\r\n\tif (active_socket) {\r\n\t\tws.send(message)\r\n\t} else {\r\n\t\t//if server is not connected, then connect first\r\n\t\tconnect();\r\n\t\tsetTimeout(function () { ws.send(message); }, 500);\r\n\t}\r\n}\r\n\r\nexport { send, connect };","import React, { Component } from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route} from \"react-router-dom\";\r\nimport './App.css';\r\nimport LoginPage from './LoginPage';\r\nimport Header from './components/layout/Header';\r\nimport About from './components/pages/About';\r\nimport Messenger from './Messenger';\r\nimport { connect, send } from './WebSocket'\r\n\r\nclass App extends Component {\r\n  state = {\r\n    ws: '',\r\n    username: null,\r\n    active_socket: false,\r\n    authenticated: true,\r\n    queuedMessage: ''\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.connect();\r\n  }\r\n\r\n  connect = () => {\r\n    var ws = this.state.ws\r\n    var active_socket = this.state.active_socket\r\n    console.log('Checking Socket Connection');\r\n\r\n    if (this.state.ws === '') {\r\n\r\n      console.log('Connecting to Socket');\r\n\r\n      var host = document.location.host;\r\n      var pathname = document.location.pathname;\r\n\r\n      ws = new WebSocket(\"ws://localhost:8080/prattle/chat/\");\r\n      // ws = new WebSocket(\"ws://\" +host  + pathname + \"chat/\");\r\n      this.setState({ ws })\r\n\r\n      ws.onopen = () => {\r\n        console.log('Connection open!');\r\n        this.setState({ active_socket: true })\r\n      }\r\n\r\n      ws.onclose = (code) => {\r\n        console.log(\"websocket closing. Code:\", code);\r\n        this.setState({ active_socket: false })\r\n        this.setState({ ws: '' })\r\n      }\r\n\r\n      ws.onerror = (evt) => {\r\n        console.log(\"Websocket Error\");\r\n        console.log(\"Error Code: \", evt.data);\r\n      }\r\n      ws.onmessage = (event) => {\r\n        console.log('Received Message');\r\n        console.log(event.data);\r\n        this.generalMessageRouter(JSON.parse(event.data));\r\n      };\r\n    }\r\n  }\r\n\r\n  send = (message) => {\r\n    var ws = this.state.ws\r\n    var active_socket = this.state.active_socket\r\n\r\n    if (active_socket) {\r\n      ws.send(message)\r\n    } else {\r\n      connect();\r\n      setTimeout(function () { ws.send(message); }, 500);\r\n    }\r\n  }\r\n\r\n  generalMessageRouter = (message) => {\r\n    console.log(\"General message router\")\r\n    console.log(message);\r\n    if (message.type == \"BROADCAST_MESSAGE\") {\r\n      this.chatMessageRouter(message);\r\n    }\r\n    if (message.from == \"USER_SERVICE\") {\r\n      this.userServiveMessageRouter(message);\r\n    }\r\n  }\r\n\r\n  chatMessageRouter = (message) => {\r\n    //  Process Broadcast\r\n    if (message.type == \"BROADCAST_MESSAGE\") {\r\n      this.processDirectChatMessage(message);\r\n    }\r\n    else if (message.type == \"DIRECT_MESSAGE\") {\r\n      this.processDirectChatMessage(message);\r\n    }\r\n  }\r\n\r\n  processDirectChatMessage(message) {\r\n    console.log(\"I got something to use\");\r\n    console.log(message);\r\n    this.setState({queuedMessage: message})\r\n\r\n  }\r\n\r\n  userServiveMessageRouter(message) {\r\n    if (message.contentType == \"LOGIN\") {\r\n      this.processLoginResponse(message);\r\n    }\r\n    if (message.contentType == \"USER_CREATE\") {\r\n      this.processUserCreateResponse(message);\r\n    }\r\n  }\r\n\r\n  processLoginResponse(message) {\r\n    if (message.content.includes(\"SUCCESS\")) {\r\n      this.setState({username: message.to})\r\n      console.log(message)\r\n      console.log(\"SUCCESS: User successfully logged into session.\");\r\n      this.setState({authenticated: true});\r\n    } else if (message.content.includes(\"FAILURE\")) {\r\n      alert(\"User Name Does not Exist. Please Create User First.\");\r\n      console.log(\"ERROR: User Name Does not Exist. Please Create User First.\");\r\n    }\r\n  }\r\n\r\n  processUserCreateResponse(message) {\r\n    if (message.content.includes(\"SUCCESS\")) {\r\n      alert(\"User successfully created. Please log in to continue\")\r\n      console.log(\"User Successfully Created!\");\r\n    }\r\n    else if (message.content.includes(\"FAILURE\")) {\r\n      alert(\"Could Not Create User Name. Please Try Another Name.\");\r\n      console.log(\"ERROR: Could Not Create User Name. Please Try Another Name.\");\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n\r\n      <Router basename=\"prattle\">\r\n        <div className=\"App\">\r\n          <div className=\"container\">\r\n            <Header username={this.state.username}/>\r\n            <Route exact path=\"/\" render={(routeProps) => (<LoginPage {...routeProps} connect={this.connect} send={this.send} username={this.state.username}/>)} />\r\n            <Route path=\"/about\" component={About} />\r\n            <Route path=\"/chat/:messageWith?\" render={(routeProps) => (<Messenger {...routeProps} connect={this.connect} send={this.send} username={this.state.username} queuedMessage={this.state.queuedMessage}/>)} />\r\n          </div>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bulma/css/bulma.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}